<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp, 27015, 10);
buffer_send = buffer_create(64, buffer_grow, 1);

GR = -1

Players = 1
Ready = 0

PlsArrSock[0] = 0               //send socket array
PlsArrIP[0] = 'localhost'
PlsArrPing[0] = 0               
PlsArrName[0] = global.profile[?'PNAME']
PlsArrID[0] = global.profile[?'PNETID']
//stat fields

PingTimestamp = 0
PingTimer = 30

//TODO Api request
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PingTimer--
if PingTimer == 0
  {
  PingTimer = 100
  //ping
  for (var i=1; i &lt; Players; i++)
    {
    PingTimestamp = current_time
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 2)
    buffer_write(buffer_send, buffer_s32, PingTimestamp)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  //ping value broadcast
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 4)
  buffer_write(buffer_send, buffer_s8, Players)
  for (var i=0; i&lt;Players; i++)
    buffer_write(buffer_send, buffer_s32, PlsArrPing[i])
  for (var i=1; i &lt; Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  //prestart timer sync
  if GR != -1
    {
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 11)
    buffer_write(buffer_send, buffer_s8, GR.BTimer)
    for (var i=1; i&lt;Players; i++)
      network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");

//TODO SENDID FIX

if type = network_type_connect
  {                   
  PlsArrSock[Players] = sock;
  PlsArrIP[Players] = ip; 
  PlsArrName[Players] = '[ connecting ]'
  PlsArrPing[Players] = 999
  Players++
  parent.tc.online = true
  }
else if type = network_type_data
  {  
  var header = buffer_read(msg_buff, buffer_s8); 
  switch(header)
    {
    //client info socket
    case 0:
      var gv = buffer_read(msg_buff, buffer_s32)
      if gv != global.GameVersion
        //todo errmsg
        {
        break
        }
      PlsArrID[eid] = buffer_read(msg_buff, buffer_s32)
      PlsArrName[eid] = buffer_read(msg_buff, buffer_string)
      
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 1)
      buffer_write(buffer_send, buffer_s8, global.GameType)
      buffer_write(buffer_send, buffer_s8, global.profile[?'PLOCALE'])
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //client ping pong answer
    case 3:
      var pong = buffer_read(msg_buff, buffer_s32)
      if pong != PingTimestamp
        {}          //TODO Force disconnect plr
      pong = buffer_read(msg_buff, buffer_s32)
      PlsArrPing[eid] = current_time - PingTimestamp
      break
      
    //client plr info       //request
    case 5:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 6)
      buffer_write(buffer_send, buffer_s8, Players)
      for (var i=0; i&lt;Players; i++)
        {
        buffer_write(buffer_send, buffer_s32, PlsArrID[i])
        buffer_write(buffer_send, buffer_string, PlsArrName[i])
        }
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break
      
    //requested game rules
    case 8:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 7)
      buffer_write(buffer_send, buffer_string, json_encode(global.custom))
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //player clicked "begin" button  
    case 9:
      if GR.prepared
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 12)
        buffer_write(buffer_send, buffer_s32, GR.Timer)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        //send game info only for eid
        }
      else
        {
        Ready++
        if Players == Ready
          {
          GR.prepared = true
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 12)
          buffer_write(buffer_send, buffer_s32, GR.Timer)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        else
          {
          GR.prestart = true
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 10)
          buffer_write(buffer_send, buffer_s8, Ready)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        }
      break
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ready++
if Players == Ready
    {
    GR.prepared = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 12)
    buffer_write(buffer_send, buffer_s32, GR.Timer)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
else
    {
    GR.prestart = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 10)
    buffer_write(buffer_send, buffer_s8, Ready)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if parent.loaded
{
//////////////////

draw_set_font(fCube)
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

draw_text(1595,565,'Players: ' + string(Players))

//ping column
var s = '';
for (var i=0; i&lt;Players; i++)
  s+= string(PlsArrPing[i]) + '#'
draw_text(1595,500,s)

//name column
s = '';
for (var i=0; i&lt;Players; i++)
  s+= PlsArrName[i] + '#'
draw_text(1500,500,s)

//prestart string
if !GR.prepared
  {
  s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players)
  draw_set_halign(fa_center)
  draw_set_valign(fa_center)
  draw_text(800, 400, s)
  }

//////////////////////
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
