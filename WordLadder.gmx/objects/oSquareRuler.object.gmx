<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init values
ARRMAX = 32             //MAINTABLE size const
tick = 0                //counter
rot = 0                 //field rotation
pxByTick = 2            //pixels by tick aka offset speed
rotReversed = 0
xOffset = 0             //square x-y offset
yOffset = 0
xELeft = 0              //current boundary ID
xERight = ARRMAX - 1
yELeft = 0
yERight = ARRMAX - 1
isHor = false           //hor or vert movement
isReverse = false       //upside-down drawing
revState = 3            //0 wait; 1 op++; 2 op--; 3 begin; 4 ticker;
animType = 0            //0 line; 1 diag;
active = false          //is squares clickable?
cheat = ''

//squares array init
f = file_bin_open('res/MAINTABLE.dat',0)
for (i=0; i&lt;ARRMAX; i++)
  for (j=0; j&lt;ARRMAX; j++)
    {
    sqArr[i,j] = instance_create(i*64,j*64,oSquare)
    chrCon = file_bin_read_byte(f)
    sqArr[i,j].content = funcChrEncode(chrCon)
    sqArr[i,j].opSq = 0
    sqArr[i,j].opCon = 0
    sqArr[i,j].revState = 0
    sqArr[i,j].parent = id
    }
file_bin_close(f)

//cheat states
chStop = false
chReverse = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;ARRMAX; i++)
  for (j=0; j&lt;ARRMAX; j++)
    instance_destroy(sqArr[i,j],true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !chStop
{
//////////

//FIELD ROTATION
if chReverse
  {
  rot-= 0.25
  if rot &lt;= 0
    rot+= 360
  }
else
  {
  rot+= 0.25
  if rot &gt;= 360
    rot-= 360
  }
rotReversed = 360-rot
    
//OFFSET CHANGING  
if isHor
  {
  xOffset+= pxByTick
  if xOffset &gt;= 64    //complete 1-square shift
    {
    xOffset = 0
    isHor = false
    for (i=0; i&lt;ARRMAX; i++)        //jump boundary square coords
      if i%2 == 0
        sqArr[i,yERight].y-= 64*ARRMAX
      else
        sqArr[i,yELeft].y+= 64*ARRMAX
    yERight--                       //change boundary IDs
    if yERight == -1
      yERight = ARRMAX-1
    yELeft++
    if yELeft == ARRMAX
      yELeft = 0
    }
  for (i=0; i&lt;ARRMAX; i++)      //else just shift
    {
    if i%2 == 0
      for (j=0; j&lt;ARRMAX; j++)
        sqArr[i,j].y+= pxByTick
    else
      for (j=0; j&lt;ARRMAX; j++)
        sqArr[i,j].y-= pxByTick  
    }
  }
else        //symmetric other-axis shifting
  {
  yOffset+= pxByTick
  if yOffset &gt;= 64
    {
    yOffset = 0
    isHor = true
    for (j=0; j&lt;ARRMAX; j++)
      if j%2 == 0
        sqArr[xERight,j].x-= 64*ARRMAX
      else
        sqArr[xELeft,j].x+= 64*ARRMAX
    xERight--
    if xERight == -1
      xERight = ARRMAX-1
    xELeft++
    if xELeft == ARRMAX
      xELeft = 0
    }
  for (j=0; j&lt;ARRMAX; j++)
    {
    if j%2 == 0
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[i,j].x+= pxByTick
    else
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[i,j].x-= pxByTick
    } 
  }
 
//ANIMATION   
switch revState             //TODO comments
  {
  case 1:
    if animType == 0
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[tick,i].revState = revState
    else
      for (i=0; i&lt;=tick; i++)
        {
        sqArr[i,tick-i].revState = revState
        sqArr[ARRMAX-1-i,ARRMAX-1-tick+i].revState = revState
        }
    tick++
    if tick == ARRMAX
      {
      tick = 0
      revState = 0
      }
    break
  case 2:
    if animType == 0
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[tick,i].revState = revState
    else
      for (i=0; i&lt;=tick; i++)
        {
        sqArr[i,tick-i].revState = revState
        sqArr[ARRMAX-1-i,ARRMAX-1-tick+i].revState = revState
        }
    tick++
    if tick == ARRMAX
      {
      tick = 0
      revState = 4
      }
    break
  case 3:
    for (i=0; i&lt;ARRMAX; i++)
      sqArr[tick,i].revState = revState
    tick++
    if tick == ARRMAX
      {
      tick = 0
      revState = 1
      }
    break
  case 4:
    tick++
    if tick == 20
      {
      tick = 0
      revState = 1
      if isReverse
        isReverse = false
      else
        isReverse = true
      }
    animType = irandom_range(0,1)  
    break
  }  
  
//PARAMETERS  
view_angle[0] = rot             //complete 180 rotation
if (rot == 80) || (rot == 260)
  {
  revState = 2
  animType = irandom_range(0,1)
  }
  
//////////// ch stop
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cheat processor, performed from MenuRuler.b2Accept
if cheat == 'STOP'
  chStop = true
else if cheat == 'REVERSE'
  if chReverse
    chReverse = false
  else
    chReverse = true
else if cheat == 'RESET'
  {
  chStop = false
  chReverse = false
  }
else if ((cheat == 'EASTER') || (cheat == 'EASTEREGG'))
  with parent {bEggClicked = true; event_perform(ev_mouse,ev_global_left_release)}
  
//refresh
cheat = ''
for (i=0; i&lt;ARRMAX; i++)
  for (j=0; j&lt;ARRMAX; j++)
    {
    sqArr[i,j].clr = c_white    //change color
    sqArr[i,j].spr = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(25,25,cheat) //debug
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
