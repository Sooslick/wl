<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_set_config(network_config_use_non_blocking_socket, 1);
client = network_create_socket(network_socket_tcp);
network_connect(client, global.IP, 27015);
buffer_send = buffer_create(64, buffer_grow, 1);

GR = -1
timeout = 300
connected = false

Players = 0
Ready = 0

PlsArrPing[0] = 0               
PlsArrName[0] = ''
PlsArrID[0] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeout--
if timeout &lt;= 0
  if !connected || parent.loaded
    {
    network_destroy(client)
    action_another_room(rMenu)
    //todo msg
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");
timeout = 300

if type = network_type_non_blocking_connect
  {
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 0)
  buffer_write(buffer_send, buffer_s32, global.GameVersion)
  buffer_write(buffer_send, buffer_s32, global.profile[?'PNETID'])
  buffer_write(buffer_send, buffer_string, global.profile[?'PNAME'])
  network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
  connected = true
  parent.tc.online = true
  }
  
else if type == network_type_data
  {    
  var header = buffer_read(msg_buff, buffer_s8)
  switch header
    {
    //recv init info: GameMode + locale
    case 1:
      global.GameType = buffer_read(msg_buff, buffer_s8)
      parent.dict.locale = buffer_read(msg_buff, buffer_s8)
      with parent {event_user(2)}
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 5)           //plr info request
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping socket
    case 2:
      var pong = buffer_read(msg_buff, buffer_s32)
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 3)
      buffer_write(buffer_send, buffer_s32, pong)
      buffer_write(buffer_send, buffer_s32, current_time)
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping broadcast
    case 4:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        PlsArrPing[i] = buffer_read(msg_buff, buffer_s32);
      break
      
    //Player Infos  
    case 6:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        {
        PlsArrID[i] = buffer_read(msg_buff, buffer_s32);
        PlsArrName[i] = buffer_read(msg_buff, buffer_string);
        }
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 8)           //rules map request
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv game rules set
    case 7:
      global.custom = json_decode(buffer_read(msg_buff, buffer_string))
      with parent.dict {event_user(0)}
      break
      
    //recv Ready qty
    case 10:
      if GR != -1
        GR.prestart = true
      Ready = buffer_read(msg_buff, buffer_s8);
      break
      
    //sync prestart timer
    case 11:
      if GR != -1
        GR.BTimer = buffer_read(msg_buff, buffer_s8);
      break
      
    //sync game timer or game start signal
    case 12:
      if GR != -1
        {
        GR.prepared = true
        GR.Timer = buffer_read(msg_buff, buffer_s32);
        }
      break
    }                
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 9)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if parent.loaded
{
//////////////////

draw_set_font(fCube)
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

draw_text(1595,560,'Players: ' + string(Players))

//ping column
var s = '';
for (var i=0; i&lt;Players; i++)
  s+= string(PlsArrPing[i]) + '#'
draw_text(1595,500,s)

//name column
s = '';
for (var i=0; i&lt;Players; i++)
  s+= PlsArrName[i] + '#'
draw_text(1540,500,s)

//prestart string
if !GR.prepared
  {
  s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players)
  draw_set_halign(fa_center)
  draw_set_valign(fa_center)
  draw_text(800, 400, s)
  }

///////////////////////
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
