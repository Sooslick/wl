<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Tech variables
Header = 'RENAME THIS GAME'
ActiveMenuPtr = 0               //MenuRuler ID
ActiveMenuOpened = false
ButtonImgChange = 0                //pointer to baton where sprite nado smenit
//Cheat = ''                      //typed by squares //removed to SquarRuler
Dead = false                    //killing MenuRuler for create new Ruler
DeadTick = 0                  //killing timer  
NextMenu = 0                //transition: 1=newgame; 2=profile; 3=ops; 4=creds
//Offset processor + anim
bActive = true
bOffInner = 1200                         //offset coordinates min-max
bOffOuter = 1790
//b2Active = false                       //currently useless
b2OffInner = 1050
b2OffOuter = 1150 +global.DRAW_VOFF*2
bTick = 0           //animation frame
b2Tick = 0
//Buttons init
bNewGame = instance_create(bOffInner,280,oButton)
bNewGame.content = 'PLAY'
bProfile = instance_create(bOffInner,440,oButton)
bProfile.content = 'PROFILE'
bOptions = instance_create(bOffInner,600,oButton)
bOptions.content = 'OPTIONS'
bAuthors = instance_create(bOffInner,760,oButton)
bAuthors.content = 'CREDITS'
bExit = instance_create(bOffInner,920,oButton)
bExit.content = 'EXIT'
//TODO B2 INIT
b2Hide = instance_create(300,b2OffOuter,oButton)
b2Hide.content = 'SWITCH'
b2Hide.dsc = 0.66
b2Hide.tsc = 0.65
b2Accept = instance_create(300,b2OffOuter+100,oButton)
b2Accept.content = 'ACCEPT'
b2Accept.dsc = 0.66
b2Accept.tsc = 0.65
//Background processor
bg = instance_create(0,0,oSquareRuler)
bg.parent = id
bg.b21 = b2Hide     //pointers to overlapping buttons
bg.b22 = b2Accept
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(bNewGame,true)
instance_destroy(bProfile,true)
instance_destroy(bOptions,true)
instance_destroy(bAuthors,true)
instance_destroy(bExit,true)
instance_destroy(b2Hide,true)
instance_destroy(b2Accept,true)
instance_destroy(bg,true)
if !ActiveMenuPtr==0
  instance_destroy(ActiveMenuPtr,true)
switch NextMenu
  {
  case 1:  instance_create(0,0,oNewGameRuler); break;
  case 2:  instance_create(0,0,oProfileRuler); break;
  case 3:  instance_create(0,0,oOptionsRuler); break;
  case 4:  instance_create(0,0,oAuthorsRuler); break;
  default: instance_create(0,0,oEasterEggRuler); break;
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bTick&gt;0
  {
  if bActive      //main out;
    {
    tmp = funcTickOffset(bTick, bOffInner,  bOffOuter,  true)
    bNewGame.x = tmp
    bProfile.x = tmp
    bOptions.x = tmp
    bAuthors.x = tmp
    bExit.x    = tmp
    if bTick==10
      {
      bTick = -1
      bActive = false
      if ButtonImgChange != 0
        ButtonImgChange.sp = sButtonMark
      }
    }
  else          //main in
    {
    tmp = funcTickOffset(bTick, bOffInner,  bOffOuter,  false)
    bNewGame.x = tmp
    bProfile.x = tmp
    bOptions.x = tmp
    bAuthors.x = tmp
    bExit.x    = tmp
    if bTick==10
      {
      bTick = -1
      bActive = true
      }
    }
  bTick++
  }
  
if b2Tick&gt;0
  {
  if !bg.active    //sec out;
    {
    tmp = funcTickOffset(b2Tick, b2OffInner, b2OffOuter, false)
    b2Hide.y   = tmp
    b2Accept.y = tmp + 100
    if b2Tick==10
      {
      bActive = false
      bg.active = true
      b2Tick = -1
      }
    }
  else          //sec in
    {
    tmp = funcTickOffset(b2Tick, b2OffInner, b2OffOuter, true)
    b2Hide.y   = tmp
    b2Accept.y = tmp + 100
    if b2Tick==10
      {
      bActive = true
      bNewGame.clickable = true
      bProfile.clickable = true
      bOptions.clickable = true
      bAuthors.clickable = true
      bExit.clickable = true
      bg.active = false
      b2Tick = -1
      }
    }
  b2Tick++
  }  
  
if Dead             
  {
  DeadTick+= 0.1
  if DeadTick&gt;=1                //transition state
    instance_destroy(self,true)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check buttons pressed
if bNewGame.clicked
  {
  if ActiveMenuOpened                       //if button menu is opened
    {
    if instance_exists(oNewGameRuler)       //same button: close menu
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oNewGameRuler)        //else switch menu 
      Header = 'GAME PREFERENCES' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bNewGame
      ButtonImgChange.sp = sButtonMark
      }
    }
  else
    {                                       //menu closed: open &amp; deactivate b2
    bTick = 1
    ButtonImgChange = bNewGame
    ActiveMenuOpened = true
    ActiveMenuPtr = instance_create(0,0,oNewGameRuler)
    Header = 'GAME PREFERENCES' 
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bNewGame.clicked = false
  }

//similar sections    
else if bProfile.clicked
  {
  if ActiveMenuOpened                 
    {
    if instance_exists(oProfileRuler)     
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oProfileRuler)  
      ActiveMenuPtr.parent = id
      Header = 'PROFILE SETTINGS' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bProfile
      ButtonImgChange.sp = sButtonMark    
      }
    }
  else
    {                                    
    bTick = 1
    ButtonImgChange = bProfile
    ActiveMenuOpened = true
    Header = 'PROFILE SETTINGS' 
    ActiveMenuPtr = instance_create(0,0,oProfileRuler)
    ActiveMenuPtr.parent = id
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bProfile.clicked = false  
  }
  
else if bOptions.clicked
  {
  if ActiveMenuOpened                 
    {
    if instance_exists(oOptionsRuler)     
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oOptionsRuler)     
      Header = 'GAME OPTIONS' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bOptions
      ButtonImgChange.sp = sButtonMark   
      }
    }
  else
    {                                    
    bTick = 1
    ButtonImgChange = bOptions
    ActiveMenuOpened = true
    Header = 'GAME OPTIONS' 
    ActiveMenuPtr = instance_create(0,0,oOptionsRuler)
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bOptions.clicked = false
  }
  
else if bAuthors.clicked
  {
  if ActiveMenuOpened                 
    {
    if instance_exists(oAuthorsRuler)     
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oAuthorsRuler)   
      Header = 'CREDITS' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bAuthors
      ButtonImgChange.sp = sButtonMark    
      }
    }
  else
    {                                    
    bTick = 1
    ButtonImgChange = bAuthors
    ActiveMenuOpened = true
    Header = 'CREDITS' 
    ActiveMenuPtr = instance_create(0,0,oAuthorsRuler)
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bAuthors.clicked = false
  }
  
//SAVE DATA &amp; QUIT  
else if bExit.clicked
  {
  funcCfgWrite()
  funcProfileWrite()
  action_end_game()
  }
  
//CLICKED = TRUE ONLY IF ACTIVE AKA CLICKABLE
else if b2Hide.clicked
  {
  bTick = 1          //button animation start
  b2Tick = 1            //switch buttons
  b2Hide.clicked = false
  ButtonImgChange = 0
  //Clickable = true only if anim end and come in (check step event)
  bNewGame.clickable = false
  bProfile.clickable = false
  bOptions.clickable = false
  bAuthors.clickable = false
  bExit.clickable = false
  }
  
//cheat accept
else if b2Accept.clicked
  {
  b2Accept.clicked = false
  //bg.cheat.process TODO!
  with (bg)
    {
    event_user(0)
    cheat = ''
    for (i=0; i&lt;ARRMAX; i++)
      for (j=0; j&lt;ARRMAX; j++)
        {
        sqArr[i,j].clr = c_white    //change color
        sqArr[i,j].spr = 0
        }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Caption
draw_set_font(fImpact96)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_alpha(1)
draw_text(800,100,Header)

//Profile name TODO: fade out
draw_set_font(fImpact64)
draw_set_halign(fa_right)
draw_text(1580,1150,'Profile: '+ global.config[?'ProfileFile'])

//Fade out
if Dead
  draw_sprite_ext(sPixel,0,0,0,1600,1200,0,0,DeadTick)
  
//black line
draw_sprite_ext(sPixel,0,1600,0,global.DRAW_HOFF/global.DRAW_SCALE,1200,0,c_black,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
