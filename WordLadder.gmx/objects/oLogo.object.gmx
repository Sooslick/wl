<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Game Version 0.0.1.8          1*8 + 256*1 + *0 + *0   todo
global.GameVersion = 264
global.versionName = 'Demo 0.0.1.8: server upd'

//init globals
randomize()
global.cfg = 'config.cfg'           //default config file
global.SaveCorrupted = false        //if error ocured when profile file read
global.NewsLoader = true            //create loader on launch
global.GameType = 0                 //gametypes: 1-4 solo; 11-12 mp
global.DictLoaded = -1              //loaded locale, see docs
global.DictDS = -1                  //loaded locale map id
global.config = ds_map_create()     //config map
global.profile = ds_map_create()    //profile map
global.userdata = ds_map_create()   //userdata map
//todo: fix cfgwrite
funcConfigRead()                    //read cfg file. TODO: apply new parameters
funcLastloginRead()                 //read userdata to sign in

//WINDOW SIZE: W, H, H:W
if global.config[?'Fullscreen'] {
  global.WIN_HEIGHT = display_get_height()
  global.WIN_WIDTH = display_get_width()
  window_set_fullscreen(global.config[?'Fullscreen'])
  } 
else {
  global.WIN_HEIGHT = global.config[?'ScreenH']
  global.WIN_WIDTH = global.config[?'ScreenW']
  window_set_size(global.WIN_WIDTH,global.WIN_HEIGHT)
  }
global.WIN_RATIO = global.WIN_HEIGHT / global.WIN_WIDTH

//WINDOW OFFSETS &amp; SCALES
if global.WIN_RATIO  &gt;=0.75          //4:3
  {
  global.DRAW_SCALE = global.WIN_WIDTH / 1600           //black lines on top &amp; bottom
  global.DRAW_VOFF = (global.WIN_HEIGHT - 1200*global.DRAW_SCALE) / 2
  global.DRAW_HOFF = 0
  global.G_VOFF = ((global.WIN_HEIGHT*1600 / global.WIN_WIDTH) -1200) /2
  global.G_HOFF = 0                                     //gui offsets
  }
else 
  {
  global.DRAW_SCALE = global.WIN_HEIGHT / 1200          //black on left &amp; right
  global.DRAW_VOFF = 0
  global.DRAW_HOFF = (global.WIN_WIDTH - 1600*global.DRAW_SCALE) / 2 
  global.G_VOFF = 0
  global.G_HOFF = ((global.WIN_WIDTH*1200 / global.WIN_HEIGHT) -1600) /2
  }
  
//ROOM VIEW SCALES
global.UPORTW = 1200 / global.WIN_RATIO   //width upscale
global.UPORTH = global.UPORTW * global.WIN_RATIO
global.DPORTH = 1600 * global.WIN_RATIO  //height downscale
global.DPORTW = global.DPORTH / global.WIN_RATIO

//GUI SIZING
global.G_LEFT = -global.G_HOFF
global.G_RIGHT = 1600+global.G_HOFF
global.G_UP = -global.G_VOFF
global.G_DOWN = 1200+global.G_VOFF
//display_set_gui_size(1600,1200)
display_set_gui_maximise(global.DRAW_SCALE, global.DRAW_SCALE, global.DRAW_HOFF, global.DRAW_VOFF)
//funcSetWinRes();

//LOGO ROOM scale
view_hview[0] = global.DPORTH
view_wview[0] = global.DPORTW
view_yview[0] = (1200-global.DPORTH) / 2
view_xview[0] = (1600-global.DPORTW) / 2

//LOGO Code and init anim vars:
frame=0
circles = 0
cx[0] = 0
cy[0] = 600
cs[0] = 0
csf = -1              //surfaces
bsf = -1
drawstr = 'SOOSLICK ART PROJECT'
if global.config[?'ShowLogo']
      {
      stepno=0        //animation state: 0 begin, 1 fade, 2 logo, 3 end
      opacity=1.0
      }
//IF LOGO SKIPPED:     
else
      room_goto(rFirst)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tick animation, circles fx
frame++
if frame &lt; 30 {
  if frame &lt; 16  {
    circles++
    cx[circles] = irandom_range(circles*100,circles*100-99)
    cy[circles] = irandom_range(400,800)
    cs[circles] = 20
    }
  for (var i=0; i&lt;=circles; i++)
    cs[i]+= 20
  }
//stepno changer
switch (frame)
  {
  case 30: stepno=1; break;         //animation case
  case 120: stepno=3; break;        //0: begin
  }                                 //1: black
if stepno==3                        //2: white  //3: end
  {
  if (surface_exists(csf))
    surface_free(csf)
  if (surface_exists(bsf))
    surface_free(bsf)
  room_goto(rFirst)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawTextPreset(fLogo, c_white, 1, fa_center, fa_center)

//draw linear blur fx to surface
if (!surface_exists(bsf))
    bsf = surface_create(1600,1200)
surface_set_target(bsf)
draw_clear_alpha(0,0)
draw_text(800,600,drawstr)
surface_reset_target()
//draw surface w/ shader
shader_set(shLinear)
var shader_params = shader_get_uniform(shLinear, "tense");
shader_set_uniform_f(shader_params, 1 - frame/777);
draw_surface(bsf,0,0)
shader_reset()

//black on white
if stepno==0
  {
  draw_sprite_ext(sPixel,0,0,0,1600,1200,0,c_white,1) //fade &amp; text
  draw_set_color(0)
  draw_text(800,600,drawstr)
  //circles fx to surface
  if (!surface_exists(csf))
    csf = surface_create(1600,1200)
  surface_set_target(csf)
  draw_clear_alpha(0,0)
  for (var i=0; i&lt;=circles; i++)
    draw_circle(cx[i],cy[i],cs[i],false)
  //text to surface: invert fx
  draw_set_blend_mode_ext(bm_src_alpha,bm_dest_alpha)
  draw_set_color(c_white)
  draw_text(800,600,drawstr)
  draw_set_blend_mode(bm_normal)
  surface_reset_target()
  
  draw_surface(csf,0,0)
  }
  
//fading
else if stepno==1
  {
  draw_set_alpha(0.5)
  draw_set_color(c_red)
  draw_text_transformed(800,600,drawstr,1,1,2)
  draw_set_color(c_aqua)
  draw_text_transformed(800,600,drawstr,1,1,358)
  draw_set_alpha(1)
  draw_sprite(LogoWhite,0,800,600)
  draw_sprite_ext(sPixel,0,0,0,1600,1200,0,c_white,opacity)
  opacity/=2
  if opacity&lt;0.01 stepno=2
  }
  
//white on black
else if stepno==2
  {
  draw_set_alpha(0.5)
  draw_set_color(c_red)
  switch (frame)
    {
    case 65: draw_text_transformed(800,800,drawstr,1.25,1.25,10); break;
    case 67: case 69: draw_text_transformed(800,600,drawstr,1.5,1.5,10); break;
    case 75: case 76: draw_text_transformed(800,400,drawstr,1.5,1.5,8); break;
    default: draw_text_transformed(800,600,drawstr,1,1,2); break;
    }
  draw_set_color(c_aqua)
  draw_text_transformed(800,600,drawstr,1,1,358)
  draw_set_alpha(1)
  draw_sprite(LogoWhite,0,800,600)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>interrupt logo anim</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>stepno=3
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
