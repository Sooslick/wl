<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp, 27015, 10);
buffer_send = buffer_create(64, buffer_grow, 1);
buffer_hist = buffer_create(64, buffer_grow, 1);

GR = -1
Stat = -1
Players = 1
Ready = 0
ptp = false
ptpPlayers = 0

//general fields
PlsArrSock[0] = 0               //send socket array
PlsArrIP[0] = 'localhost'
PlsArrPing[0] = 0               
PlsArrName[0] = global.profile[?'PNAME']
PlsArrID[0] = global.profile[?'PNETID']
PlsArrWord[0] = ''
PlsArrScore[0] = 0
PlsArrShift[0] = false
PlsArrUnban[0] = -1
PlsArrReady[0] = false
PlsArrPos[0] = 0
//ptpfields
PtpArrTimer[0] = 0
PtpArrPlaying[0] = false
PtpArrShift[0] = 0
PtpArrShiftProg[0] = 0    //new shift after every 33 points
PtpArrUnban[0] = 0
PtpArrUnbanProg[0] = 0      //new unban after every 42 points
PtpArrPos[0] = 0
PtpPos = 0
PtpPosMax = 0

PingTimestamp = 0
PingTimer = 30
BRestart = -1

ChatActive = false
Chat = instance_create(800,200,oGameChat)
Chat.parent = id
Chat.visible = false

Vote = false
VoteP = -1
VoteWord = ''
VoteShift = false
VoteBan = false

//TODO Api request
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 17)  
buffer_write(buffer_send, buffer_string, 'Server shut down')  
for (i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    
network_destroy(server)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PingTimer--
if PingTimer == 0
  {
  PingTimer = 100
  //ping
  for (var i=1; i &lt; Players; i++)
    {
    PingTimestamp = current_time
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 2)
    buffer_write(buffer_send, buffer_s32, PingTimestamp)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  //ping value broadcast
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 4)
  buffer_write(buffer_send, buffer_s8, Players)
  for (var i=0; i&lt;Players; i++)
    buffer_write(buffer_send, buffer_s32, PlsArrPing[i])
  for (var i=1; i &lt; Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  //prestart timer sync
  if GR != -1
    {
    if !GR.prepared
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 11)
      buffer_write(buffer_send, buffer_s32, GR.BTimer)
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      }
    //start timer sync
    else
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 12)
      buffer_write(buffer_send, buffer_s32, GR.Timer)
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BRestart != -1
  if BRestart.clicked
    {
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 19)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    network_destroy(server)
    action_another_room(rGame)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");

//TODO SENDID FIX

if type = network_type_connect
  {                   
  PlsArrSock[Players] = sock;
  PlsArrIP[Players] = ip; 
  PlsArrName[Players] = '[ connecting ]'
  PlsArrPing[Players] = 999
  PlsArrWord[Players] = ''
  PlsArrScore[Players] = 0
  PlsArrShift[Players] = false
  PlsArrUnban[Players] = -1
  PlsArrReady[Players] = false
  PlsArrPos[Players] = Players
  
  PtpArrTimer[Players] = 999
  PtpArrPlaying[Players] = false
  PtpArrShift[Players] = 0
  PtpArrShiftProg[Players] = 0
  PtpArrUnban[Players] = 0
  PtpArrUnbanProg[Players] = 0
  PtpArrPos[Players] = Players
  Players++
  parent.tc.online = true
  }
else if type = network_type_data
  {  
  for (var i=0; i &lt; Players; i++)
    if eid == PlsArrSock[i]
      {
      eid = i
      break
      }
  
  var header = buffer_read(msg_buff, buffer_s8); 
  switch(header)
    {
    //client info socket
    case 0:
      var gv = buffer_read(msg_buff, buffer_s32)
      if gv != global.GameVersion
        //todo errmsg
        {
        break
        }
      PlsArrID[eid] = buffer_read(msg_buff, buffer_s32)
      PlsArrName[eid] = buffer_read(msg_buff, buffer_string)
      
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 1)
      buffer_write(buffer_send, buffer_s8, global.GameType)
      buffer_write(buffer_send, buffer_s8, global.profile[?'PLOCALE'])
      buffer_write(buffer_send, buffer_s8, eid)
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //client ping pong answer
    case 3:
      var pong = buffer_read(msg_buff, buffer_s32)
      if pong != PingTimestamp
        {}          //TODO Force disconnect plr
      pong = buffer_read(msg_buff, buffer_s32)
      PlsArrPing[eid] = current_time - PingTimestamp
      break
      
    //client plr info       //request
    case 5:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 6)
      buffer_write(buffer_send, buffer_s8, Players)
      for (var i=0; i&lt;Players; i++)
        {
        buffer_write(buffer_send, buffer_s32, PlsArrID[i])
        buffer_write(buffer_send, buffer_string, PlsArrName[i])
        }
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break
      
    //requested game rules
    case 8:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 7)
      buffer_write(buffer_send, buffer_string, json_encode(global.custom))
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //player clicked "begin" button  
    case 9:
      if GR.prepared
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 10)
        buffer_write(buffer_send, buffer_s8, Ready)
        buffer_write(buffer_send, buffer_string, GR.Cube.w1)
          network_send_packet( PlsArrSock[eid], buffer_send, buffer_tell(buffer_send) );
        //broadcast timer
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 12)
        buffer_write(buffer_send, buffer_s32, GR.Timer)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        //send word history socket 24
        buffer_seek(buffer_hist, buffer_seek_start, 0);
        buffer_write(buffer_hist, buffer_s8, 24)
        var w = GR.words;
        buffer_write(buffer_hist, buffer_s32, w)
        for (var i=0; i&lt;w; i++)
          buffer_write(buffer_hist, buffer_string, GR.prevWordList[|i])
        network_send_packet( PlsArrSock[eid], buffer_hist, buffer_tell(buffer_hist) );
        //send GameCube state socket 25
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 25)
        buffer_write(buffer_send, buffer_s8, GR.MinLen)
        buffer_write(buffer_send, buffer_s32, GR.words)
        buffer_write(buffer_send, buffer_string, GR.Cube.w2)
        buffer_write(buffer_send, buffer_string, GR.Cube.w3)
        buffer_write(buffer_send, buffer_string, GR.Cube.w4)
        network_send_packet( PlsArrSock[eid], buffer_send, buffer_tell(buffer_send) );
        //send current game state &amp; score
        event_user(3)
        }
      else
        {
        Ready++
        ptpPlayers++
        PlsArrReady[eid] = true
        if Players == Ready
          {    
          GR.prepared = true
          GR.currWord = string_char_at(GR.prevWord,string_length(GR.prevWord))
          GR.Cube.Rot = true
          //ready 4 Cube Sync
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 10)
          buffer_write(buffer_send, buffer_s8, Ready)
          buffer_write(buffer_send, buffer_string, GR.Cube.w1)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          //Game Start signal
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 12)
          buffer_write(buffer_send, buffer_s32, GR.Timer)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
            
          if ptp
            { 
            for (var i=0; i&lt;Players; i++)
              {
              PtpArrTimer[0] = GR.Timer
              PtpArrPlaying[0] = true
              var r = irandom_range(0, Players-1);
              if r != i
                {
                var p = PtpArrPos[i];
                PtpArrPos[i] = PtpArrPos[r];
                PtpArrPos[r] = p;
                }
              }
            PtpPos = 0
            PtpPosMax = Players - 1
            for (var i=1; i&lt;Players; i++)
              {
              //ptp fields
              buffer_seek(buffer_send, buffer_seek_start, 0);
              buffer_write(buffer_send, buffer_s8, 26)
              buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
              if PtpPos == PtpArrPos[i]
                buffer_write(buffer_send, buffer_bool, true)
              else
                buffer_write(buffer_send, buffer_bool, false)
              buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
              buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
              network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
              }
            if PtpArrPos[0] == PtpPos
              {
              GR.myWord = true
              GR.waiting = false
              GR.Cube.ApplyBw = false
              }
            }
          }
        else
          {
          GR.prestart = true
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 10)
          buffer_write(buffer_send, buffer_s8, Ready)
          buffer_write(buffer_send, buffer_string, GR.Cube.w1)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        }
      break
    
    //player input
    case 13:
      GR.myWord = false
      var TTNum = buffer_read(msg_buff, buffer_s8);
      var Shift = buffer_read(msg_buff, buffer_bool);
      var enter = buffer_read(msg_buff, buffer_bool);
      var word = buffer_read(msg_buff, buffer_string);
      if enter
        enter = checkWord(word,GR,TTNum)
      var VoteScope = 0;
      if string_length(word) &gt; GR.MinLen
        VoteScope+= 1
      if TTNum != -1
        VoteScope+= 2
      if Shift
        VoteScope+= 4
      PlsArrWord[eid] = word
      if enter &amp;&amp; ptp
        {
        var cnt = 0;
        for (var i=0; i&lt; ds_list_size(GR.TargetList); i++)
                cnt+= string_count(GR.TargetList[| i],word)
        PlsArrScore[eid]+= GR.ptpwords + cnt
        cnt++
        PtpArrShiftProg[eid]+= cnt;
        if PtpArrShiftProg[eid] &gt; 33
          {
          PtpArrShiftProg[eid]-= 33
          PtpArrShift[eid]++
          }
        PtpArrUnbanProg[eid]+= cnt;
        if PtpArrUnbanProg[eid] &gt; 42
          {
          PtpArrUnbanProg[eid]-= 42
          PtpArrUnban[eid]++
          }
        PtpArrTimer[eid]+= (GR.MinLen-1)*GR.SecPerLetter + cnt*GR.SecPerLetter*0.5
        if string_length(word) &gt; GR.MinLen
          PtpArrTimer[eid] = PtpArrTimer[eid] div 2
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 14)
        buffer_write(buffer_send, buffer_s8, eid)
        buffer_write(buffer_send, buffer_bool, true)
        buffer_write(buffer_send, buffer_bool, false)
        buffer_write(buffer_send, buffer_bool, false)
        buffer_write(buffer_send, buffer_string, word)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        GR.currWord = word
        GR.Cube.w1 = word
        with GR {event_user(1)}
        if TTNum != -1
          PtpArrUnban[0]--
        if Shift
          PtpArrShift[0]--
        var searching = true;
        while searching
          {
          PtpPos++
          if PtpPos == Players
            {
            PtpPos = 0
            GR.ptpwords++
            }
          for (var i=0; i&lt;Players; i++)
            if PtpArrPos[i] == PtpPos &amp;&amp; PtpArrPlaying[i] == true
              searching = false
          }
        for (var i=1; i&lt;Players; i++)
          {
          //ptp fields
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 26)
          buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
          if PtpPos == PtpArrPos[i]
            buffer_write(buffer_send, buffer_bool, true)
          else
            buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
          buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        if PtpArrPos[0] == PtpPos
          {
          GR.myWord = true
          GR.waiting = false
          GR.Cube.ApplyBw = false
          }
        } 
      else if enter &amp;&amp; VoteScope == 0        //word ok
        {
        GR.currWord = word
        GR.Cube.w1 = word
        PlsArrScore[eid]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(GR.currWord)
        for (var i=0; i&lt; ds_list_size(GR.TargetList); i++)
          {
          var cnt = string_count(GR.TargetList[| i],word) ;
          if cnt &gt; 0
            PlsArrScore[eid]+= ceil(cnt*GR.words / 10)
          }
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 14)
        buffer_write(buffer_send, buffer_s8, eid)
        buffer_write(buffer_send, buffer_bool, true)
        buffer_write(buffer_send, buffer_bool, false)   //no use tt
        buffer_write(buffer_send, buffer_bool, false)   //no use shift
        buffer_write(buffer_send, buffer_string, word)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        GR.myWord = false
        with GR {event_user(1)}
        for (var i=0; i&lt;Players; i++)
          PlsArrWord[i] = ''
        if Vote
          {
          Vote = false
          GR.Vote = false
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 23)
          buffer_write(buffer_send, buffer_s8, Players)
          buffer_write(buffer_send, buffer_s8, GR.VoteY)
          buffer_write(buffer_send, buffer_s8, GR.VoteN)
          buffer_write(buffer_send, buffer_bool, true)
          buffer_write(buffer_send, buffer_bool, false)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        }
      else if !enter || Vote           //word not ok       or vote initialized yet           
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 14)
        buffer_write(buffer_send, buffer_s8, eid)
        buffer_write(buffer_send, buffer_bool, false)
        buffer_write(buffer_send, buffer_bool, false)   //tt
        buffer_write(buffer_send, buffer_bool, false)   //shift
        buffer_write(buffer_send, buffer_string, word)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        }
      else if VoteScope &gt; 0           //word ok: init vote
        {
        VoteP = eid;
        VoteWord = word
        if Shift
          VoteShift = true
        else
          VoteShift = false
        if TTNum &gt;= 0
          VoteBan = true
        else
          VoteBan = false
        Vote = true
        var Desc = 'Vote by ' + PlsArrName[eid] + '#';
        switch VoteScope
          {
          case 1: Desc+= 'Increase word length?#Word: ' + word; break;
          case 2: Desc+= 'Use Unban ability?#Word: ' + word; break;
          case 3: Desc+= 'Use Unban and increase word length?#Word: ' + word; break;
          case 4: Desc+= 'Use Shift ability?#Word: ' + word; break;
          case 5: Desc+= 'Use Shift and increase word length?#Word: ' + word; break;
          case 6: Desc+= 'Use both Unban and Shift abilities?#Word: ' + word; break; 
          case 7: Desc+= 'Use both abilities and increase word length?#Word: ' + word; break;
          }
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 21)
        buffer_write(buffer_send, buffer_s8, VoteScope)
        buffer_write(buffer_send, buffer_s8, VoteP)
        buffer_write(buffer_send, buffer_string, Desc)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        GR.VoteText = Desc
        with GR {event_user(3)}       //vote create
        }
      break 
    
    //chat str
    case 20:
      Chat.GotStr = PlsArrName[eid] + ':' + chr(888) + buffer_read(msg_buff, buffer_string);
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 20)
      buffer_write(buffer_send, buffer_string, Chat.GotStr)
      for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      with Chat {event_user(0)}
      break
      
    //vote click
    case 22:
      var answer = buffer_read(msg_buff, buffer_bool);
      if answer
        GR.VoteY++
      else
        GR.VoteN++
      //Vote result check
      var isResult = false;
      var Result = false;
      if GR.VoteY / Players &gt; 0.5
        {
        isResult = true
        Result = true
        }
      else if GR.VoteN / Players &gt; 0.5
        isResult = true
      else if GR.VoteY + GR.VoteN == Players
        isResult = true
      //VoteResult sent
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 23)
      buffer_write(buffer_send, buffer_s8, Players)
      buffer_write(buffer_send, buffer_s8, GR.VoteY)
      buffer_write(buffer_send, buffer_s8, GR.VoteN)
      buffer_write(buffer_send, buffer_bool, isResult)
      buffer_write(buffer_send, buffer_bool, Result)
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      //Post operations
      if isResult
        {
        GR.Vote = false
        Vote = false
        if VoteP == 0
          GR.waiting = false
        if Result
          {
          GR.currWord = VoteWord
          GR.Cube.w1 = VoteWord
          if VoteShift
            GR.ShiftQty--
          if VoteBan
            GR.TTQty--
          PlsArrScore[VoteP]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(GR.currWord)
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 14)
          buffer_write(buffer_send, buffer_s8, VoteP)
          buffer_write(buffer_send, buffer_bool, VoteShift)
          buffer_write(buffer_send, buffer_bool, VoteBan)
          buffer_write(buffer_send, buffer_string, VoteWord)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          with GR {event_user(1)}
          for (var i=0; i&lt;Players; i++)
            PlsArrWord[i] = ''
          }
        else
          {
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 14)
          buffer_write(buffer_send, buffer_s8, VoteP)
          buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_string, VoteWord)
          network_send_packet( PlsArrSock[VoteP], buffer_send, buffer_tell(buffer_send) );
          }
        }
      break
      
      //ptp timer off
    case 27:
      PtpArrPlaying[eid] = false
      ptpPlayers--
      if ptpPlayers &gt; 1
        {
        var searching = true;
        while searching
          {
          PtpPos++
          if PtpPos == Players
            {
            PtpPos = 0
            GR.ptpwords++
            }
          for (var i=0; i&lt;Players; i++)
            if PtpArrPos[i] == PtpPos &amp;&amp; PtpArrPlaying[i] == true
              searching = false
          }
        for (var i=1; i&lt;Players; i++)
          {
          //ptp fields
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 26)
          buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
          if PtpPos == PtpArrPos[i]
            buffer_write(buffer_send, buffer_bool, true)
          else
            buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
          buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        if PtpArrPos[0] == PtpPos
          {
          GR.myWord = true
          GR.waiting = false
          GR.Cube.ApplyBw = false
          }
        }
      else
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 28)
        for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        event_user(4)
        }
      break
    }
  }
else if type = network_type_disconnect
  {
  for (var i=0; i&lt;Players; i++)
    if sock == PlsArrSock[i]
      {
      eid = i
      break
      }
   
  //Pl count ?
  if PlsArrReady[eid]
    Ready--    
    
  //ptp operations  
  if PtpArrPlaying[eid]
    ptpPlayers--
    
  if PtpPos == PtpArrPos[eid]
    {
    PtpArrPlaying[eid] = false
    if ptpPlayers &gt; 1
      {
      var searching = true;
      while searching
        {
        PtpPos++
        if PtpPos == Players
          {
          PtpPos = 0
          GR.ptpwords++
          }
        for (var i=0; i&lt;Players; i++)
          if PtpArrPos[i] == PtpPos &amp;&amp; PtpArrPlaying[i] == true
            searching = false
        }
      for (var i=1; i&lt;Players; i++)
        {
        //ptp fields
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 26)
        buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
        if PtpPos == PtpArrPos[i]
          buffer_write(buffer_send, buffer_bool, true)
        else
          buffer_write(buffer_send, buffer_bool, false)
        buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
        buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        }
      if PtpArrPos[0] == PtpPos
        {
        GR.myWord = true
        GR.waiting = false
        GR.Cube.ApplyBw = false
        }
      }
    else
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 28)
      for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      event_user(4)
      }
    }
    
  //disconnect socket  
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 18)
  buffer_write(buffer_send, buffer_s8, eid)
  for (var i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  
  //Shift Table Pos
  for (var i=0; i&lt;Players; i++)
    if PlsArrPos[i] &gt; PlsArrPos[eid]
      PlsArrPos[i]--  
      
  //shift array
  for (var i = eid; i &lt; Players-1; i++)
    {
    PlsArrSock[i] = PlsArrSock[i+1]
    PlsArrIP[i] = PlsArrIP[i+1]
    PlsArrPing[i] = PlsArrPing[i+1]
    PlsArrName[i] = PlsArrName[i+1]
    PlsArrID[i] = PlsArrID[i+1]
    PlsArrWord[i] = PlsArrWord[i+1]
    PlsArrScore[i] = PlsArrScore[i+1]
    PlsArrShift[i] = PlsArrShift[i+1]
    PlsArrUnban[i] = PlsArrUnban[i+1]
    PlsArrReady[i] = PlsArrReady[i+1]
    PlsArrPos[i] = PlsArrPos[i+1]
    PtpArrTimer[i] = PtpArrTimer[i+1]
    PtpArrPlaying[i] = PtpArrPlaying[i+1]
    PtpArrShift[i] = PtpArrShift[i+1]
    PtpArrShiftProg[i] = PtpArrShiftProg[i+1]
    PtpArrUnban[i] = PtpArrUnban[i+1]
    PtpArrUnbanProg[i] = PtpArrUnbanProg[i+1]
    PtpArrPos[i] = PtpArrPos[i+1]
    }
  Players--
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vote</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if GR.VoteChoice
  GR.VoteY++
else
  GR.VoteN++
//Vote result check
var isResult = false;
var Result = false;
if GR.VoteY / Players &gt; 0.5
  {
  isResult = true
  Result = true
  }
else if GR.VoteN / Players &gt; 0.5
  isResult = true
else if GR.VoteY + GR.VoteN == Players
  isResult = true
//VoteResult sent
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 23)
buffer_write(buffer_send, buffer_s8, Players)
buffer_write(buffer_send, buffer_s8, GR.VoteY)
buffer_write(buffer_send, buffer_s8, GR.VoteN)
buffer_write(buffer_send, buffer_bool, isResult)
buffer_write(buffer_send, buffer_bool, Result)
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
//Post operations
if isResult
  {
  GR.Vote = false
  GR.waiting = false
  Vote = false
  if Result
    {
    GR.currWord = VoteWord
    GR.Cube.w1 = VoteWord
    PlsArrScore[VoteP]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(GR.currWord)
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 14)
    buffer_write(buffer_send, buffer_s8, VoteP)
    buffer_write(buffer_send, buffer_bool, true)
    buffer_write(buffer_send, buffer_bool, VoteShift)
    buffer_write(buffer_send, buffer_bool, VoteBan)
    buffer_write(buffer_send, buffer_string, VoteWord)
    for (var i=1; i&lt;Players; i++)
      network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    with GR {event_user(1)}
    for (var i=0; i&lt;Players; i++)
      PlsArrWord[i] = ''
    }
  else
    {
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 14)
    buffer_write(buffer_send, buffer_s8, VoteP)
    buffer_write(buffer_send, buffer_bool, false)
    buffer_write(buffer_send, buffer_bool, false)
    buffer_write(buffer_send, buffer_bool, false)
    buffer_write(buffer_send, buffer_string, VoteWord)
    network_send_packet( PlsArrSock[VoteP], buffer_send, buffer_tell(buffer_send) );
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chat event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chat.GotStr = PlsArrName[0] + ':' + chr(888) + Chat.PendingStr
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 20)
buffer_write(buffer_send, buffer_string, Chat.GotStr)
for (var i=1; i&lt;Players; i++)
      network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
with Chat {event_user(0)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gameover event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BRestart = instance_create(1328,1100,oButton)
BRestart.content = 'RESTART'

//Stat passed from GameRuler in endgame event
var bestpl = -1;
var bestsc = -1;
for (var i=0; i&lt;Players; i++)
  if PlsArrScore[i] &gt; bestsc
    {
    bestpl = i
    bestsc = PlsArrScore[i]
    }
var s = 'BEST PLAYER:#';
s+= PlsArrName[bestpl]
s+= '##SCORE:#'
s+= string(PlsArrScore[bestpl])
Stat.s = s
Chat.visible = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ban &amp; Green &amp; Score broadcast</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//B &amp; G BROADCAST
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 15)            //header
buffer_write(buffer_send, buffer_s8, GR.ShiftQty)
buffer_write(buffer_send, buffer_s8, GR.TTQty)
buffer_write(buffer_send, buffer_s8, GR.MinLen)     //length

var B = ds_list_size(GR.TabuList);
var G = ds_list_size(GR.TargetList);
var S = '';
for (var i=0; i&lt;B; i++)
  S+= GR.TabuList[|i]
for (var i=0; i&lt;G; i++)
  S+= GR.TargetList[|i]

buffer_write(buffer_send, buffer_s8, B)             //Banned qty
buffer_write(buffer_send, buffer_s8, G)             //Greens Qty
buffer_write(buffer_send, buffer_string, S)         //Banned + Greens char sequence
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  
//SCORE SORT
var ne_ok = false;
for (var i=1; i&lt;Players; i++)
  if PlsArrScore[PlsArrPos[i]] &gt; PlsArrScore[PlsArrPos[i-1]]
    {
    ne_ok = true;
    break;
    }
if ne_ok
  for (var j=Players; j&gt;1; j--)
    for (var i=1; i&lt;j; i++)
      {
      var id1;
      var id2;
      for (var g=0; g&lt;Players; g++)
        if PlsArrPos[g] == i
          {
          id1 = g;
          break
          }
      for (var g=0; g&lt;Players; g++)
        if PlsArrPos[g] == i-1
          {
          id2 = g;
          break
          }
      if PlsArrScore[id1] &gt; PlsArrScore[id2]
        {
        var k = PlsArrPos[id1];
        PlsArrPos[id1] = PlsArrPos[id2]
        PlsArrPos[id2] = k
        }
      }
  
//SCORE BROADCAST
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 16)            //header
buffer_write(buffer_send, buffer_s8, Players)       //pls
for (i=0; i&lt;Players; i++)
  {
  buffer_write(buffer_send, buffer_s8, PlsArrPos[i])
  buffer_write(buffer_send, buffer_s32, PlsArrScore[i])
  }
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pressed enter</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var TTNum = GR.TTNum
var Shift = GR.Shift
var enter = true
var word = GR.currWord
var VoteScope = 0;
if string_length(word) &gt; GR.MinLen
  VoteScope+= 1
if TTNum != -1
  VoteScope+= 2
if Shift
  VoteScope+= 4
  
if ptp
  {
  var cnt = 0;
  for (var i=0; i&lt; ds_list_size(GR.TargetList); i++)
          cnt+= string_count(GR.TargetList[| i],word)
  PlsArrScore[0]+= GR.ptpwords + cnt
  cnt++
  PtpArrShiftProg[0]+= cnt;
  if PtpArrShiftProg[0] &gt; 33
    {
    PtpArrShiftProg[0]-= 33
    PtpArrShift[0]++
    }
  PtpArrUnbanProg[0]+= cnt;
  if PtpArrUnbanProg[0] &gt; 42
    {
    PtpArrUnbanProg[0]-= 42
    PtpArrUnban[0]++
    }
  PtpArrTimer[0]+= (GR.MinLen-1)*GR.SecPerLetter + cnt*GR.SecPerLetter*0.5
  if string_length(word) &gt; GR.MinLen
    PtpArrTimer[0] = PtpArrTimer[0] div 2
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 14)
  buffer_write(buffer_send, buffer_s8, 0)
  buffer_write(buffer_send, buffer_bool, true)
  buffer_write(buffer_send, buffer_bool, false)
  buffer_write(buffer_send, buffer_bool, false)
  buffer_write(buffer_send, buffer_string, GR.currWord)
  for (var i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  GR.currWord = word
  GR.Cube.w1 = word
  with GR {event_user(1)}
  GR.waiting = true
  GR.myWord = false
  GR.Cube.ApplyBw = true
  if TTNum != -1
    PtpArrUnban[0]--
  if Shift
    PtpArrShift[0]--
  var searching = true;
  while searching
    {
    PtpPos++
    if PtpPos == Players
      {
      PtpPos = 0
      GR.ptpwords++
      }
    for (var i=0; i&lt;Players; i++)
      if PtpArrPos[i] == PtpPos &amp;&amp; PtpArrPlaying[i] == true
        searching = false
    }
  for (var i=1; i&lt;Players; i++)
    {
    //ptp fields
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 26)
    buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
    if PtpPos == PtpArrPos[i]
      buffer_write(buffer_send, buffer_bool, true)
    else
      buffer_write(buffer_send, buffer_bool, false)
    buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
    buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  if PtpArrPos[0] == PtpPos
    {
    GR.myWord = true
    GR.waiting = false
    GR.Cube.ApplyBw = false
    }
  }  
  
else if VoteScope == 0
  {
  PlsArrScore[0]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(word)
  for (var i=0; i&lt; ds_list_size(GR.TargetList); i++)
          {
          var cnt = string_count(GR.TargetList[| i],word) ;
          if cnt &gt; 0
            PlsArrScore[0]+= ceil(cnt*GR.words / 10)
          }
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 14)
  buffer_write(buffer_send, buffer_s8, 0)
  buffer_write(buffer_send, buffer_bool, true)
  buffer_write(buffer_send, buffer_bool, false)       //no use tt
  buffer_write(buffer_send, buffer_bool, false)       //no use shift
  buffer_write(buffer_send, buffer_string, GR.currWord)
  for (var i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  GR.myWord = true
  with GR {event_user(1)}
  GR.waiting = false
  for (var i=0; i&lt;Players; i++)
    PlsArrWord[i] = ''
  
  if Vote
    {
    Vote = false
    GR.Vote = false
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 23)
    buffer_write(buffer_send, buffer_s8, Players)
    buffer_write(buffer_send, buffer_s8, GR.VoteY)
    buffer_write(buffer_send, buffer_s8, GR.VoteN)
    buffer_write(buffer_send, buffer_bool, true)
    buffer_write(buffer_send, buffer_bool, false)
    for (var i=1; i&lt;Players; i++)
      network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  }
  
else if !Vote
  {
  VoteP = 0
  VoteWord = word
  Vote = true
  var Desc = 'Vote by ' + PlsArrName[0] + '#';
  switch VoteScope
    {
    case 1: Desc+= 'Increase word length?#Word: ' + word; break;
    case 2: Desc+= 'Use Unban ability?#Word: ' + word; break;
    case 3: Desc+= 'Use Unban and increase word length?#Word: ' + word; break;
    case 4: Desc+= 'Use Shift ability?#Word: ' + word; break;
    case 5: Desc+= 'Use Shift and increase word length?#Word: ' + word; break;
    case 6: Desc+= 'Use both Unban and Shift abilities?#Word: ' + word; break; 
    case 7: Desc+= 'Use both abilities and increase word length?#Word: ' + word; break;
    }
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 21)
  buffer_write(buffer_send, buffer_s8, VoteScope)
  buffer_write(buffer_send, buffer_s8, VoteP)
  buffer_write(buffer_send, buffer_string, Desc)
  for (var i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  GR.VoteText = Desc
  with GR {event_user(3)}
  }
  
else
  {
  GR.waiting = false
  GR.Cube.LengthErr = true
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 14)
buffer_write(buffer_send, buffer_s8, 0)
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_string, GR.currWord)
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ready++
ptpPlayers++
PlsArrReady[0] = true
Chat.visible = true
if Players == Ready
    {
    GR.prepared = true
    GR.currWord = string_char_at(GR.prevWord,string_length(GR.prevWord))
    GR.Cube.Rot = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 12)
    buffer_write(buffer_send, buffer_s32, GR.Timer)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        
    if ptp
        { 
        for (var i=0; i&lt;Players; i++)
          {
          PtpArrTimer[0] = GR.Timer
          PtpArrPlaying[0] = true
          var r = irandom_range(0, Players-1);
          if r != i
            {
            var p = PtpArrPos[i];
            PtpArrPos[i] = PtpArrPos[r];
            PtpArrPos[r] = p;
            }
          }
        PtpPos = 0
        PtpPosMax = Players - 1
        for (var i=1; i&lt;Players; i++)
          {
          //ptp fields
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 26)
          buffer_write(buffer_send, buffer_s32, PtpArrTimer[i])
          if PtpPos == PtpArrPos[i]
            buffer_write(buffer_send, buffer_bool, true)
          else
            buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_s8, PtpArrShift[i])
          buffer_write(buffer_send, buffer_s8, PtpArrUnban[i])
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        if PtpArrPos[0] == PtpPos
          {
          GR.myWord = true
          GR.Cube.ApplyBw = false
          }
        }
    }
else
    {
    GR.prestart = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 10)
    buffer_write(buffer_send, buffer_s8, Ready)
    buffer_write(buffer_send, buffer_string, GR.currWord)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit
  
if Stat != -1
  if Stat.active
    exit

draw_set_font(fImpact64)
draw_set_color(c_white)
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

for (var i=0; i&lt;Players; i++)
  {
  var j = PlsArrPos[i];
  var p = PlsArrPos[0]-j;
  if abs(p) &lt; 6
    {
    draw_set_alpha(1 - abs(p)/5)
    //name column
    var w = string_width(PlsArrName[i]);
    if w &lt; 350
      draw_text(1595,675-p*70,PlsArrName[i])
    else
      draw_text_transformed(1595,675-p*70,PlsArrName[i],350/w,1,0)
    //score column
    draw_text(1240,675-p*70,string(PlsArrScore[i]))
    //draw_text(1240,675-p*70,string(PlsArrPos[i]))
    //word column
    if p != 0
      draw_text(1080,675-p*70,PlsArrWord[i])
    }
  }
  
//debug
draw_set_font(fDebug)
draw_set_color(c_aqua)
draw_set_alpha(1)
draw_set_halign(fa_left)
for (var i=0; i&lt;Players; i++)
  {
  draw_text(i*50,25,PlsArrWord[i])
  draw_text(i*50,50,string(PlsArrScore[i]))
  draw_text(i*50,75,string(PlsArrPos[i]))
  draw_text(i*50,100,string(PtpArrTimer[i]))
  draw_text(i*50,125,string(PtpArrPlaying[i]))
  draw_text(i*50,150,string(PtpArrShift[i]))
  draw_text(i*50,175,string(PtpArrShiftProg[i]))
  draw_text(i*50,200,string(PtpArrUnban[i]))
  draw_text(i*50,225,string(PtpArrUnbanProg[i]))
  draw_text(i*50,250,string(PtpArrPos[i]))
  }
draw_text(25,300,string(PtpPos))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit

draw_set_font(fImpact64)
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_valign(fa_top)

draw_text(1595,65,'Players: ' + string(Players))

//ping column
//for (var i=0; i&lt;Players; i++)
//  draw_text(1595,485-i*65,string(PlsArrPing[i]))

//prestart string
if GR != -1
  if !GR.prepared
    {
    s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(800, 400, s)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
