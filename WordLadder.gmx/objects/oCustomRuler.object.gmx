<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OnclickEvent = 0
uiDelay = false
////////////////////////
//START WORD LENGTH LIST
bStartLen = instance_create(300,220,oList)
ds_map_add(bStartLen.arr,0,'Start w/ 4')
ds_map_add(bStartLen.arr,1,'Start w/ 5')
ds_map_add(bStartLen.arr,2,'Start w/ 6')
//cfg fix
global.config[?'CustomStart'] = floor(global.config[?'CustomStart'])          //if cfg is wrong
if (global.config[?'CustomStart'] &lt; 0) || (global.config[?'CustomStart']&gt;11)  //if cfg is oob
  global.config[?'CustomStart'] = 0
bStartLen.val = 'Start w/ ' + string(global.config[?'CustomStart']+4)
bStartLen.num = -1
//fields
bStartLen.dsc = 0.84
bStartLen.hintMsg = 'Word length at the game start'
bStartLen.depth = depth-3
bStartLen.StartDepth = depth-3
//////////////////
//START TIMER LIST
bStartTimer = instance_create(300,340,oList)
ds_map_add(bStartTimer.arr,0,'Timer: 30s')
ds_map_add(bStartTimer.arr,1,'Timer: 45s')
ds_map_add(bStartTimer.arr,2,'Timer: 60s')
ds_map_add(bStartTimer.arr,3,'Timer: auto')
//cfg check/fix
global.config[?'CustomTimer'] = floor(global.config[?'CustomTimer'])
if (global.config[?'CustomTimer'] &gt;= 0) &amp;&amp; (global.config[?'CustomTimer'] &lt;= 3) {
  bStartTimer.num = global.config[?'CustomTimer']
  bStartTimer.val = bStartTimer.arr[?bStartTimer.num]
  }
else if global.config[?'CustomTimer'] &gt;= 20 {
  bStartTimer.num = global.config[?'CustomTimer']
  bStartTimer.val = 'Timer: ' + string(global.config[?'CustomTimer']) + 's'
  }
else {
  bStartTimer.num = 3
  bStartTimer.val = 'Timer: auto'
  }
//fields
bStartTimer.dsc = 0.84
bStartTimer.hintMsg = 'The time you have from the start'
bStartTimer.depth = depth-2
bStartTimer.StartDepth = depth-2
////////////////////////
//TIMER INCREMENT LIST//
bSec = instance_create(300,460,oList)
ds_map_add(bSec.arr,0,'Inc.: 3s')
ds_map_add(bSec.arr,1,'Inc.: 4s')
ds_map_add(bSec.arr,2,'Inc.: 5s')
//cfg fix
global.config[?'CustomInc'] = floor(global.config[?'CustomInc'])          //if cfg is wrong
if (global.config[?'CustomInc'] &lt; 0) || (global.config[?'CustomInc']&gt;2)  //if cfg is oob
  global.config[?'CustomInc'] = 2
bSec.val = 'Inc.: ' + string(global.config[?'CustomInc']+3) + 's'
bSec.num = global.config[?'CustomInc']
//fields
bSec.dsc = 0.84
bSec.hintMsg = 'Time bonus for every letter in the word'
bSec.depth = depth-1
bSec.StartDepth = depth-1
////////////////////////
//BANNED LETTERS SPEED//
bBan = instance_create(1200,220,oList)
ds_map_add(bBan.arr,0,'Bans: simple')
ds_map_add(bBan.arr,1,'Bans: advanced')
ds_map_add(bBan.arr,2,'Bans: fastest')
//cfg fix
global.config[?'CustomBans'] = floor(global.config[?'CustomBans'])          //if cfg is wrong
if (global.config[?'CustomBans'] &lt; 0) || (global.config[?'CustomBans']&gt;2)   //if cfg is oob
  global.config[?'CustomBans'] = 0
bBan.num = global.config[?'CustomBans']
bBan.val = bBan.arr[?bBan.num]
//others
bBan.dsc = 0.84
bBan.hintMsg = 'The speed of banned letters amount increasing'
bBan.depth = depth-3
bBan.StartDepth = depth-3
/////////////////////////
//VOWELS BAN PERCENTAGE//
bVowel = instance_create(1200,340,oSlider)
bVowel.content = 'VOWELS BAN %'
bVowel.font = fImpact64
//cfg fix
if (global.config[?'CustomVowels'] &lt; 0) || (global.config[?'CustomVowels']&gt;100)
  global.config[?'CustomVowels'] = 20
//fields
bVowel.currval = global.config[?'CustomVowels']
bVowel.dsc = 0.84
bVowel.depth = depth-2
bVowel.StartDepth = depth-2
with bVowel {event_user(0)}   //uirescale!
//////////////////////
//GREENS LETTERS QTY//
bGreen = instance_create(1200,460,oList)
ds_map_add(bGreen.arr,0,'Greens: often')
ds_map_add(bGreen.arr,1,'Greens: rare')
ds_map_add(bGreen.arr,2,'Greens: never')
//cfg fix
global.config[?'CustomGreens'] = floor(global.config[?'CustomGreens'])          //if cfg is wrong
if (global.config[?'CustomGreens'] &lt; 0) || (global.config[?'CustomGreens']&gt;2)   //if cfg is oob
  global.config[?'CustomGreens'] = 0
bGreen.num = global.config[?'CustomGreens']
bGreen.val = bGreen.arr[?bGreen.num]
//fields
bGreen.dsc = 0.84
bGreen.hintMsg = 'Frequency of green letters appearing'
bGreen.depth = depth-2
bGreen.StartDepth = depth-2
///////////////////////////////////
//LENGTH DECREMENTATIORIUM2002002v2
bDec = instance_create(750,220,oList)
ds_map_add(bDec.arr,0,'Dec.: often')
ds_map_add(bDec.arr,1,'Dec.: rare')
ds_map_add(bDec.arr,2,'Dec.: never')
//cfg fix
global.config[?'CustomDec'] = floor(global.config[?'CustomDec'])          //if cfg is wrong
if (global.config[?'CustomDec'] &lt; 0) || (global.config[?'CustomDec']&gt;2)   //if cfg is oob
  global.config[?'CustomDec'] = 0
bDec.num = global.config[?'CustomDec']
bDec.val = bDec.arr[?bDec.num]
//fields
bDec.dsc = 0.84
bDec.hintMsg = 'Frequency of word length decrease'
bDec.depth = depth-3
bDec.StartDepth = depth-3
/////////////
//U N B A N//
bUnban = instance_create(750,340,oCheckBox)
bUnban.content = 'Unbans'
bUnban.checked = global.config[?'CustomUnbans']
bUnban.dsc = 0.84
bUnban.depth = depth-2
bUnban.StartDepth = depth-2
with bUnban {uiRescale(375)}
//S H I F T//
bShift = instance_create(750,460,oCheckBox)
bShift.content = 'Shifts'
bShift.checked = global.config[?'CustomShifts']
bShift.dsc = 0.84
bShift.depth = depth-2
bShift.StartDepth = depth-2
with bShift {uiRescale(375)}
//H I N T S//
bHints = instance_create(750,580,oCheckBox)
bHints.content = 'Hints'
bHints.checked = global.config[?'CustomHints']
bHints.dsc = 0.84
bHints.depth = depth-2
bHints.StartDepth = depth-2
with bHints {uiRescale(375)}
///////////////
//bBack &amp; bGo//
bBack = instance_create(300,800,oButton)
bBack.content = 'BACK'
bBack.depth = depth-1
bBack.StartDepth = depth-1
//
bGo = instance_create(1200,800,oButton)
bGo.content = 'START'
bGo.depth = depth-2
bGo.StartDepth = depth-2
//clickable l i s t
alist = ds_list_create()
ds_list_add(alist, bStartLen,bStartTimer,bSec,bBan,bVowel,bGreen,bDec,bUnban,bShift,bHints,bBack,bGo)
//clickables f i e l d s
for (var i=0; i&lt;ds_list_size(alist); i++) {
  alist[|i].parent = id
  alist[|i].useParentSurface = true
  alist[|i].sx = alist[|i].x + 50
  alist[|i].sy = alist[|i].y + 180
  }
//surface
ds = surface_create(1500,900)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(bStartLen,true)
instance_destroy(bBan,true)
instance_destroy(bVowel,true)
instance_destroy(bDec,true)
instance_destroy(bUnban,true)
instance_destroy(bShift,true)
instance_destroy(bHints,true)
instance_destroy(bStartTimer,true)
instance_destroy(bSec,true)
instance_destroy(bGreen,true)
instance_destroy(bBack,true)
instance_destroy(bGo,true)
ds_list_destroy(alist)
if surface_exists(ds)
  surface_free(ds)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !uiDelay
  exit
  
uiDelay = false
uiSetClickable(alist, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bStartLen.clicked {
  if bStartLen.active {             //list opened
    uiSetClickable(alist, false)
    bStartLen.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bBan.clicked {
  if bBan.active {             //list opened
    uiSetClickable(alist, false)
    bBan.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bDec.clicked {
  if bDec.active {             //list opened
    uiSetClickable(alist, false)
    bDec.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bStartTimer.clicked {
  if bStartTimer.active {             //list opened
    uiSetClickable(alist, false)
    bStartTimer.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bSec.clicked {
  if bSec.active {             //list opened
    uiSetClickable(alist, false)
    bSec.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bGreen.clicked {
  if bGreen.active {             //list opened
    uiSetClickable(alist, false)
    bGreen.clickable = true
    }
  else                            //list closed
    uiDelay = true
  }
  
else if bBack.clicked {
  with parent {
    Header = 'SINGLEPLAYER'
    layer.Anim = true               //layer: destroy old
    layer.AnimType = 1
    layer.depth++
    layerObj = instance_create(0,0,oGameSolo) //layer: create new
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerObj.parent = id
    }
  uiSetClickable(alist,false)
  }
  
else if bGo.clicked
  {
  //fix defaults
  if bStartLen.num == -1
    bStartLen.num = 0
  //write config
  global.config[?'CustomStart'] = bStartLen.num
  global.config[?'CustomTimer'] = bStartTimer.num
  global.config[?'CustomInc'] = bSec.num
  global.config[?'CustomDec'] = bDec.num
  global.config[?'CustomUnbans'] = bUnban.checked
  global.config[?'CustomShifts'] = bShift.checked
  global.config[?'CustomHints'] = bHints.checked
  global.config[?'CustomBans'] = bBan.num
  global.config[?'CustomVowels'] = bVowel.currval
  global.config[?'CustomGreens'] = bGreen.num
  //todo refactor
  funcFreeGameSettings()
  global.custom = ds_map_create()
  global.custom[?'StartLen'] = bStartLen.num + 4
  global.custom[?'Banned'] = bBan.num
  global.custom[?'Vowels'] = bVowel.currval / 10
  global.custom[?'Dec'] = bDec.num
  global.custom[?'Unban'] = bUnban.checked
  global.custom[?'Shift'] = bShift.checked
  global.custom[?'Hints'] = bHints.checked
  global.custom[?'StartTimer'] = bStartTimer.num
  global.custom[?'Sec'] = bSec.num + 3
  global.custom[?'Green'] = bGreen.num
  global.GameType = 4
  instance_destroy(parent, true)
  room_goto(rGame)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(ds)
  ds = surface_create(1500,900)
surface_set_target(ds)
draw_clear_alpha(0,0)

drawTextPreset(fImpact64, c_white,1, fa_center, fa_center)
draw_text(300,100,'GAME START')
draw_text(750,100,'ABILITIES')
draw_text(1200,100,'FEATURING')

surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
