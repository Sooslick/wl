<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init values
ARRMAX = 28             //MAINTABLE size const //MUST BE odd otherwise visual issue happens
tick = 0                //animation timer
rot = 0                 //field rotation
pxByTick = 2            //pixels by tick aka offset speed
xOffset = 0             //square x-y offset
yOffset = 0
xELeft = 0              //current boundary ID
xERight = ARRMAX - 1
yELeft = 0
yERight = ARRMAX - 1
isHor = false           //hor or vert movement
revState = 3            //0 wait; 1 op++; 2 op--; 3 begin; 4 wait20; 5 end; 6 wait-destroy
animType = 0            //0 line; 1 diag;
active = false
parent = -1
isReverse = false

HINT_WORD = ''
HINT_LENGTH = 12

//squares array init
for (i=0; i&lt;ARRMAX; i++)
  for (j=0; j&lt;ARRMAX; j++)
    {
    sqArr[i,j] = instance_create(i*64-64,j*64-64,oSquare)
    sqArr[i,j].content = -1
    sqArr[i,j].opSq = 0
    sqArr[i,j].opCon = 0
    sqArr[i,j].revState = 0
    sqArr[i,j].parent = id
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;ARRMAX; i++)
  for (j=0; j&lt;ARRMAX; j++)
    instance_destroy(sqArr[i,j],true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//OFFSET CHANGING  
if isHor
  {
  xOffset+= pxByTick
  if xOffset &gt;= 64    //complete 1-square shift
    {
    xOffset = 0
    isHor = false
    for (i=0; i&lt;ARRMAX; i++)        //jump boundary square coords
      if i%2 == 0
        sqArr[i,yERight].y-= 64*ARRMAX
      else
        sqArr[i,yELeft].y+= 64*ARRMAX
    yERight--                       //change boundary IDs
    if yERight == -1
      yERight = ARRMAX-1
    yELeft++
    if yELeft == ARRMAX
      yELeft = 0
    }
  for (i=0; i&lt;ARRMAX; i++)      //else just shift
    {
    if i%2 == 0
      for (j=0; j&lt;ARRMAX; j++)
        sqArr[i,j].y+= pxByTick
    else
      for (j=0; j&lt;ARRMAX; j++)
        sqArr[i,j].y-= pxByTick  
    }
  }
else        //symmetric other-axis shifting
  {
  yOffset+= pxByTick
  if yOffset &gt;= 64
    {
    yOffset = 0
    isHor = true
    for (j=0; j&lt;ARRMAX; j++)
      if j%2 == 0
        sqArr[xERight,j].x-= 64*ARRMAX
      else
        sqArr[xELeft,j].x+= 64*ARRMAX
    xERight--
    if xERight == -1
      xERight = ARRMAX-1
    xELeft++
    if xELeft == ARRMAX
      xELeft = 0
    }
  for (j=0; j&lt;ARRMAX; j++)
    {
    if j%2 == 0
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[i,j].x+= pxByTick
    else
      for (i=0; i&lt;ARRMAX; i++)
        sqArr[i,j].x-= pxByTick
    } 
  }
 
//ANIMATION   
switch revState             //TODO comments
  {
  case 3:                       //Square approach
    for (i=0; i&lt;ARRMAX; i++)
      {
      sqArr[tick,i].revState = revState
      }
    tick++
    if tick == ARRMAX
      {
      tick = 0
      revState = 4
      }
    break
  case 4:                       //after approach wait
    tick++
    if tick == HINT_LENGTH
      {
      tick = 0
      revState = 6
      if (parent != -1)
        with parent {event_user(TransitionEvent)}
      }
    break
  case 5:                       //after out wait
    tick++
    if tick == 20
      {
      tick = 0
      revState = 0
      instance_destroy(self,true)
      }
    break
  case 6:                       //Square out
    for (i=0; i&lt;ARRMAX; i++)
      {
      sqArr[tick,i].revState = 8
      }
    tick++
    if tick == ARRMAX
      {
      tick = 0
      revState = 5
      }
    break
  }  
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hint word param passed
if HINT_WORD != ''
  {
  global.profile[?'PSHINTS']++
  i = irandom_range(1,3)
  j = irandom_range(3,ARRMAX-3)
  for (n=1; n&lt;=string_length(HINT_WORD); n++)
    {
    sqArr[i,j].content = funcChrEncode(ord(string_char_at(HINT_WORD,n)))
    i+= irandom_range(1,3)
    if i &gt;= ARRMAX
      i = 1
    j+= irandom_range(-5,5)
    if j &gt;= ARRMAX
      j = 1
    else if j &lt; 0
      j = ARRMAX - 1
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
