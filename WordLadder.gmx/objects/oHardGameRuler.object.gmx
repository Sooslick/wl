<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OnclickEvent = 1
//cfg + general game vars
gameReadSettings()
gameSetGeneralVars()
//game objects and obj's vars (eg from cfg)
gameGeneralObjCreate(20)
gameSetFirstWord()

//PrgBarObjects
TargetW = instance_create(400,200,oProgSquare)
TargetW.Req = 159        //words
TargetW.content = 'WORDS'
TargetW.visible = true
//with TargetW {event_user(0)}
TargetL = instance_create(600,200,oProgSquare)
TargetL.Req = 1111       //letters
TargetL.content = 'LETTERS'
TargetL.visible = true
//with TargetL {event_user(0)}
TargetT = instance_create(800,200,oProgSquare)
TargetT.Req = 111        //antitabus
TargetT.content = 'GREEN LETTERS'
TargetT.visible = true
//with TargetT {event_user(0)}
TargetM = instance_create(1000,200,oProgSquare)
TargetM.Req = 10        //minlens
TargetM.content = 'LONG WORDS'
TargetM.visible = true
AllowDec = false
//with TargetM {event_user(0)}
TargetMLen = 12
TargetB = instance_create(1200,200,oProgSquare)
TargetB.Req = 10        //extrabanneds
TargetB.width = 30
TargetB.content = '5+ BANNED'
TargetB.visible = true
//with TargetB {event_user(0)}
success = false

//HARDMODE CORRECTION
if global.profile[?'GM2'] &gt; 0 {
  TargetW.Req = 228
  TargetL.Req = 1616
  TargetT.Req = 146
  TargetMLen = 13
  TargetB.Req = 25
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gameover Event
if success {
  Stat.success = true
  global.profile[?'GM2'] = 1
  }
if BStart != -1
  instance_destroy(BStart, true)
if bBack != -1 {
  instance_destroy(bBack, true)
  instance_destroy(bEnd, true)
  }
if HintObj != -1
  instance_destroy(HintObj, true)
instance_destroy(wl, true)
instance_destroy(l, true)
instance_destroy(Abil, true)
instance_destroy(Timer, true)
instance_destroy(DecPB, true)
instance_destroy(ShiftPB, true)
instance_destroy(TTPB, true)
instance_destroy(Cube, true)
instance_destroy(TargetW,true)
instance_destroy(TargetL,true)
instance_destroy(TargetT,true)
instance_destroy(TargetM,true)
instance_destroy(TargetB,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if prepared {
  //timer
  if Timer.Timer&lt;=0 {
    prepared = false
    with Stat {event_user(0)}
    instance_destroy(self, true)
    exit
    }
  //process hint
  if EnableHints {
    Think++
    //hint timers
    if HintTimer &gt; 0        //cooldown
      HintTimer--
    if Timer.Timer &lt; 20000  //20s
      HintTimeUp = true
    else if Think &gt; 6666     //2 minutes of thinking...
      HintTooLong = true
    if (HintTimeUp || HintTooLong) &amp;&amp; HintTimer==0  //create
      funcCreateHint()
    }
  Stat.ticks+= Timer.Interval
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BStart&gt;0 {
  if BStart.clicked {
    instance_destroy(BStart,true)
    BStart = -1
    prepared = true
    currWord = string_char_at(prevWord,string_length(prevWord))
    Cube.Rot = true
    Timer.active = true
    Timer.LastTime = current_time
    global.profile[?'PSGAMES']++
    exit
    }
  }
if bBack != -1 {
  if bBack.clicked {
    funcProfileWrite()
    funcSendProfile()
    instance_destroy(Stat, true)
    instance_destroy(self, true)
    room_goto(rMenu)
    }
  else if bEnd.clicked {
    with Stat {event_user(0)}
    instance_destroy(self, true)
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stat.attempts++

//check len
if string_length(currWord) &lt; MinLen {
  Cube.LengthErr = true
  Stat.lens++
  exit
  }
  
//check tabu
for (i=2; i&lt;=string_length(currWord); i++) {
  j = ds_list_find_index(l.TabuList, string_char_at(currWord,i))
  if (j != -1) &amp;&amp; (j != TTNum) {
    Timer.Timer-= 5000
    Cube.TabuErr = true
    Cube.TabuErrNum = j
    Stat.tabus++
    exit
    } 
  }

//check prevword
if wordlistTyped(wl,currWord, true) {
  Timer.Timer-= 5000
  Stat.prevs++
  exit
  }                                                      
    
//check dict
var tmpm, tmpl, tmp;
  //first lv find
  tmpm = ds_map_find_value(global.DictDS,string_char_at(currWord,1))
  if tmpm != -1
    {
    tmpl = ds_map_find_value(tmpm,string_char_at(currWord,2))
    if tmpl != -1
      {
      tmp = ds_list_find_index(tmpl,currWord)
      if tmp != -1 {
      
        //Target words
        TargetW.Prog++
        //target letters
        TargetL.Prog+= string_length(prevWord)
        //Target targets
        var cnt = 0;
        for (var i=0; i&lt; ds_list_size(l.TargetList); i++)
          cnt+= string_count(l.TargetList[| i],currWord) ;
        TargetT.Prog+= cnt
        //target minlens
        if string_length(currWord) &gt;= TargetMLen {
          TargetM.Prog++
          if TargetM.Prog &gt;= TargetM.Req      //restore dec feature
            AllowDec = true
          }
        //5 ban
        if ds_list_size(l.TabuList) &gt;= 5
          TargetB.Prog++
          
        gameWordAcceptedSolo()
        
        if (TargetW.Prog &gt;= TargetW.Req) &amp;&amp;
           (TargetL.Prog &gt;= TargetL.Req) &amp;&amp;
           (TargetT.Prog &gt;= TargetT.Req) &amp;&amp;
           (TargetM.Prog &gt;= TargetM.Req) &amp;&amp;
           (TargetB.Prog &gt;= TargetB.Req) {
           success = true
           prepared = false
           with Stat {event_user(0)}
           instance_destroy(self, true)
           }
        }
      else {
        Timer.Timer-= 5000
        Cube.LengthErr = true
        Stat.dicts++
        }
      }
    else {
      Timer.Timer-= 5000
      Cube.LengthErr = true
      Stat.dicts++
      }
    }
  else {
    Timer.Timer-= 5000
    Cube.LengthErr = true
    Stat.dicts++
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enter event</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TabuHilight
if TT {
  var xt = Cube.x;
  if Shift xt+= 72
  draw_set_alpha(0.2)
  draw_set_color(c_white)
  j = MinLen*32
  draw_rectangle(xt-j+TTNum*72,Cube.y-j-100,xt-j+TTNum*72+66,Cube.y-j-34,false)
  }

if paused {
  drawTextPreset(fImpact96, c_white, 1, fa_left, fa_top)
  //background + border
  draw_sprite_ext(sPixel,0,50,50,1100,1100,0,0,0.75)
  for (var i=0; i&lt;4; i++)
    draw_rectangle(50+i,50+i, 1150-i, 1150-i, true)
  //caption
  draw_text(100,60, 'ADVANCED GAME')
  //hint
  draw_set_font(fCube)
  draw_text(65, 180, 'Press Esc to continue game')
  //stat
  draw_text(65, 260, 'GAME STAT#Playtime: ' + formatTimeString(Stat.ticks) + 
    '#Words: ' + string(TargetW.Prog) + ' / ' + string(TargetW.Req) +
    '#Letters: ' + string(TargetL.Prog) + ' / ' + string(TargetL.Req) +
    '#Green letters: ' + string(TargetT.Prog) + ' / ' + string(TargetT.Req) +
    '#Long words: ' + string(TargetM.Prog) + ' / ' + string(TargetM.Req) +
    '#5+ banned: ' + string(TargetB.Prog) + ' / ' + string(TargetB.Req))
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alpha background
draw_sprite_ext(sPixel,0,0,0,1600,1200,0,0,0.5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameAnykeySolo(0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
