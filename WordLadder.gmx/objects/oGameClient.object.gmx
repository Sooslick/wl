<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_set_config(network_config_use_non_blocking_socket, 1);
client = network_create_socket(network_socket_tcp);
network_connect(client, global.IP, 27015);            //todo: read port from global
buffer_send = buffer_create(64, buffer_grow, 1);

PID = -1            //player sock's ID on server
GR = -1
Stat = -1
timeout = 600
connected = false
forceEndgame = false    //if recvd endgame socket while loading
ptp = false

Players = 0
Ready = 0

Plr[0] = -1

PlrList = instance_create(0,0,oPlayerList)
PlrList.Players = 0
PlrList.PlsArr = -1
PlrList.MyPlr = 0

RestartTimer = 359
Restarting = false

Chat = instance_create(800,36,oGameChat)
Chat.parent = id
Chat.visible = false

funcLogDetail('client init')
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client)

//todo: destroy child object (chat, plrlist, plrs...)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeout--
if timeout &lt;= 0
  if !connected || parent.loaded {
    instance_destroy(self, true)
    instance_destroy(GR, true)
    instance_destroy(Stat, true)
    room_goto(rMenu)
    //todo refactor gameroom destructor
    }
    
if Restarting {
  if !forceEndgame {
    RestartTimer--
    if RestartTimer &lt;= 0 {
      global.GameType = 0
      instance_destroy(self, true)
      instance_destroy(GR, true)
      instance_destroy(Stat, true)
      room_goto(rGame)
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");
timeout = 600

if type = network_type_non_blocking_connect {
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 0)
  buffer_write(buffer_send, buffer_s32, global.GameVersion)
  buffer_write(buffer_send, buffer_s32, global.profile[?'PNETID'])
  buffer_write(buffer_send, buffer_string, global.profile[?'PNAME'])
  network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
  connected = true
  parent.tc.online = true
  global.config[?'SavedIP'] = global.IP
  funcLogString('connected to ' + global.IP)
  }
  
else if type == network_type_data {    
  var header = buffer_read(msg_buff, buffer_s8)
  funcLogDetail('client recv socket ' + string(header))
  switch header {
    //recv init info: GameMode + locale
    case 1:
      //read buffer
      global.GameType = buffer_read(msg_buff, buffer_s8)
      parent.dict.locale = buffer_read(msg_buff, buffer_s8)
      PID = buffer_read(msg_buff, buffer_s8)
      GR.reconnect = buffer_read(msg_buff, buffer_bool)
      with parent {event_user(2)}                        //start loading and create GR obj
      //write info request
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 5)           //plr info request
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping socket
    case 2:
      var pong = buffer_read(msg_buff, buffer_s32)
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 3)
      buffer_write(buffer_send, buffer_s32, pong)
      buffer_write(buffer_send, buffer_s32, current_time)
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping broadcast
    case 4:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        Plr[i].Ping = buffer_read(msg_buff, buffer_s32);
      break
      
    //Player Infos  array
    case 6:
      //badcode todo: rewrite plr arr
      for (var i=0; i&lt;Players; i++) {
        instance_destroy(Plr[i], true)
        Plr[i] = -1
        }
      //write players names
      var init_eid = buffer_read(msg_buff, buffer_s8);
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++) {
        Plr[i] = instance_create(0,0,oPlayer)
        Plr[i].ID = buffer_read(msg_buff, buffer_s32);
        Plr[i].Name = buffer_read(msg_buff, buffer_string);
        playerScaleCalc(Plr[i], 1, PlrList.WName, Plr[i].Name)
        if Plr[i].ID == global.profile[?'PNETID']             //refresh plrlist
          PlrList.MyPlr = Plr[i]
        }
      PlrList.PlsArr = Plr
      PlrList.Players = Players
      with PlrList event_user(0)
      //send request for gamerules
      if init_eid == PID {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 8)           //rules map request
        network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
        }
      break
      
    //recv game rules set
    case 7:
      global.custom = json_decode(buffer_read(msg_buff, buffer_string))
      with parent.dict {event_user(0)}
      break
      
    //recv Ready qty
    case 10:
      Ready = buffer_read(msg_buff, buffer_s8);
      if GR != -1 {
        if Ready &gt; 0
          GR.prestart = true
        if Ready == Players
          with GR event_user(4)     //trigger startgame //todo: another trigger 4 event_user
        }
      break
      
    //sync prestart timer
    case 11:
      if GR != -1
        GR.preTimer = buffer_read(msg_buff, buffer_s32);
      break
      
    //sync game timer or game start signal
    case 12:
      if GR != -1
        GR.Timer.Timer = buffer_read(msg_buff, buffer_s32);             //timer sync
      break
      
    //word checked by server
    case 14:
      if GR != -1 {
        var pid = buffer_read(msg_buff, buffer_s8);     //player typed the word
        var mw = false;                                 //my word flag
        if pid == PID
          mw = true
        var success = buffer_read(msg_buff, buffer_bool);
        var sh = buffer_read(msg_buff, buffer_bool);
        var bb = buffer_read(msg_buff, buffer_bool);
        var word = buffer_read(msg_buff, buffer_string);
        Plr[pid].Word = word
        playerScaleCalc(Plr[pid], 2, 0, word)
        if success {
          if sh
            GR.Shift = true
          if bb
            GR.TT = true
          GR.currWord = word
          GR.Cube.w1 = word
          var sc = gameWordAcceptedMulti(GR, mw);
          GR.Abil.Value[0]+= sc   //display score
          GR.Stat.pp+= sc         //Stat score
          for (var i=0; i&lt;Players; i++)
            Plr[i].Word = ''
          }
        }
      break
      
    //refresh Ban &amp; Green Lists
    case 15:
      if GR != -1 {
        var ab = GR.Abil;
        var l = GR.l;
        ab.Value[1] = buffer_read(msg_buff, buffer_s8);
        ab.Value[2] = buffer_read(msg_buff, buffer_s8);
        GR.MinLen = buffer_read(msg_buff, buffer_s8);
        GR.Cube.NewLen = GR.MinLen
        var B = buffer_read(msg_buff, buffer_s8);       //todo: letters next
        var G = buffer_read(msg_buff, buffer_s8);       //fix empty line reading
        var S = buffer_read(msg_buff, buffer_string);   //to implement good code
        ds_list_clear(l.TabuList)
        for (var i=1; i&lt;=B; i++)
          ds_list_add(l.TabuList,string_char_at(S,i))
        ds_list_clear(l.TargetList)
        for (var i=B+1; i&lt;=B+G; i++)
          ds_list_add(l.TargetList,string_char_at(S,i))
        }
      break
      
    //refresh scoretable
    case 16:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++) {
        Plr[i].Score = buffer_read(msg_buff, buffer_s32);
        playerScaleCalc(Plr[i], 0, PlrList.WScore, string(Plr[i].Score))
        }
      with PlrList event_user(0)
      break
      
    //disconnected
    case 17:
      timeout = 9999
      connected = false
      if GR != -1
        GR.Timer.Timer = 0        //force endgame by timer reset
      else
        forceEndgame = true
      break
      
    //someone disconnected
    case 18:
      var pid = buffer_read(msg_buff, buffer_s8);
          //shift array
      for (var i = pid; i &lt; Players-1; i++)       //todo refactor rhis method
        Plr[i] = Plr[i+1]
      Players--
      PlrList.PlsArr = Plr
      PlrList.Players = Players
      with PlrList event_user(0)
      break
      
    //restart signal
    case 19:
      RestartTimer = 359
      Restarting = true
      if GR == -1
        forceEndgame = true
      break
      
    //chat event
    case 20:
      Chat.GotStr = buffer_read(msg_buff, buffer_string);
      with Chat {event_user(0)}
      break
    
    //Vote init event
    case 21:
      buffer_read(msg_buff, buffer_s8);                   //scope
      buffer_read(msg_buff, buffer_s8);                   //votestarter
      var txt = buffer_read(msg_buff, buffer_string);
      voteInit(GR, txt)
      //TODO Force Yes if PID == VoteStarter
      break
      
    //Vote progress
    case 22:
      var p = buffer_read(msg_buff, buffer_s8);
      if p != PID {
        var answer = buffer_read(msg_buff, buffer_bool);
        if answer
          GR.VoteY++
        else
          GR.VoteN++
        }
      break
    
    //Vote end event
    case 23:
      Vote = false
      GR.Vote = false
      var isResult = buffer_read(msg_buff, buffer_bool);
      if !isResult {
        GR.waiting = false;
        GR.Cube.LengthErr = true
        }
      break
      
    //full word history recv
    case 24:
      //get history
      var tmp = buffer_read(msg_buff, buffer_s32);   //tmp - words qty
      var w = GR.wl;
      w.Words = 0
      for (var i=0; i&lt;tmp; i++)
        wordlistAddWord(w, buffer_read(msg_buff, buffer_string));
      //set Cube state
      var c = GR.Cube;
      if w.Words &gt; 0 {
        c.w2 = w.Arr[w.Words-1]
        if w.Words &gt; 1 {
          c.w3 = w.Arr[w.Words-2]
          if w.Words &gt; 2
            c.w4 = w.Arr[w.Words-3]
          }
        GR.prevWord = c.w2
        GR.currWord = string_char_at(c.w2, string_length(c.w2))
        }  
      break
      
    //current game state recv
    case 25:
      GR.MinLen = buffer_read(msg_buff, buffer_s8);
      GR.Cube.MinLen = GR.MinLen
      GR.Cube.w2 = buffer_read(msg_buff, buffer_string);
      GR.Cube.w3 = buffer_read(msg_buff, buffer_string);
      GR.Cube.w4 = buffer_read(msg_buff, buffer_string);
      GR.prepared = buffer_read(msg_buff, buffer_bool)
      GR.currWord = buffer_read(msg_buff, buffer_string)
      GR.prevWord = buffer_read(msg_buff, buffer_string)
      if GR.prepared
        GR.Cube.w1 = GR.currWord
      else
        GR.Cube.w1 = GR.prevWord
      break
      
    //ptp: my state TODO: refactor
    case 26:
      GR.Timer.Timer = buffer_read(msg_buff, buffer_s32);
      GR.myWord = buffer_read(msg_buff, buffer_bool);
      if GR.myWord {
        GR.waiting = false
        GR.Cube.ApplyBw = false
        }
      else {
        GR.Cube.ApplyBw = true
        GR.waiting = true
        }
      GR.Abil.Value[1] = buffer_read(msg_buff, buffer_s8);      //shift
      GR.Abil.Value[2] = buffer_read(msg_buff, buffer_s8);      //unban
      break
      
    //ptp: endgame
    case 28:
      event_user(4)
      break
      
    //synch progbars
    case 29:
      GR.ShiftPB.Prog = buffer_read(msg_buff, buffer_s16);
      GR.ShiftPB.Req = buffer_read(msg_buff, buffer_s16);
      GR.TTPB.Prog = buffer_read(msg_buff, buffer_s16);
      GR.TTPB.Req = buffer_read(msg_buff, buffer_s16);
      GR.DecPB.Prog = buffer_read(msg_buff, buffer_s16);
      GR.DecPB.Req = buffer_read(msg_buff, buffer_s16);
      //todo: fix progbar delaying
      break
      
    //get local stat
    case 31:
      GR.Abil.Value[0] = buffer_read(msg_buff, buffer_s32)
      //todo other stat + reconnect check
      break
      
    //game states socket
    case 32:
      GR.waiting = false
      GR.BStart.clickable = true
      GR.prestart = buffer_read(msg_buff, buffer_bool)
      GR.prepared = buffer_read(msg_buff, buffer_bool)
      if GR.prepared {
        GR.prevWord = buffer_read(msg_buff, buffer_string)
        GR.currWord = string_char_at(GR.prevWord, string_length(GR.prevWord))
        GR.Cube.w2 = GR.prevWord
        GR.Cube.w1 = GR.currWord                          //omg
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 24)           //history request
        network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
        }
      else {
        GR.prevWord = buffer_read(msg_buff, buffer_string)
        GR.Cube.w1 = GR.prevWord
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 33)           //first word request
        network_send_packet( client, buffer_send, buffer_tell(buffer_send) )
        }
      break
    }               
  } 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if forceEndgame {
  forceEndgame = false      //debug-costyl?
  timeout = 2               //forced step skip before disconnect
  RestartTimer = 0          //or restart room on next stepevent
  exit                      //very strange solution. Should refactor to functions. Todo?
  }
  
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 30)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
GR.waiting = true
GR.BStart.clickable = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>request local state</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ptp end of timer</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !GR.myWord
  exit
  
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 27)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
funcLogDetail('client event 7')
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vote </string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 22)
buffer_write(buffer_send, buffer_s8, PID)
buffer_write(buffer_send, buffer_bool, GR.VoteChoice)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
funcLogDetail('client event 6')
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>send chat</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 20)
buffer_write(buffer_send, buffer_string, Chat.PendingStr)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameover event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stat passed from GameRuler in endgame event
with Stat event_user(0)
var bestpl = -1;
var bestsc = -1;
for (var i=0; i&lt;Players; i++)
  if Plr[i].Score &gt; bestsc {
    bestpl = i
    bestsc = Plr[i].Score         //refactor!!!
    }
var s;
if connected
  s = '#'
else
  s = 'HOST LEFT THE ROOM##'
s+= 'BEST PLAYER: '
s+= Plr[bestpl].Name
s+= '##SCORE: '
s+= string(Plr[bestpl].Score)
Stat.s = s
Chat.visible = false
GR = -1               //GR self-destoyed
PlrList.drawEnable = false

funcLogDetail('client event 4')

//your score??? todo
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter pressed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 13)
buffer_write(buffer_send, buffer_s8, GR.TTNum)
buffer_write(buffer_send, buffer_bool, GR.Shift)
buffer_write(buffer_send, buffer_bool, true)
buffer_write(buffer_send, buffer_string, GR.currWord)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
funcLogDetail('client event 2')
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Input event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 13)
buffer_write(buffer_send, buffer_s8, GR.TTNum)      //unused if accept = false?
buffer_write(buffer_send, buffer_bool, GR.Shift)    //same
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_string, GR.currWord)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if GR.prepared
  with GR event_user(4)   //just join the game after start
else
  GR.prestart = true      //wait for pre-timer
Chat.visible = true
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 9)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
funcLogDetail('client +rdy')
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit
  
if Restarting {
  drawTextPreset(fCube, c_white, 1, fa_right, fa_bottom)
  var s = 'Restarting in ';
  s+= string(RestartTimer div 60)
  draw_text(1595, 1195, s)
  }
  
if Stat != -1
  if Stat.active
    exit

drawTextPreset(fImpact64, c_white, 1, fa_right, fa_top)
draw_text(global.G_RIGHT-5,65,'Players: ' + string(Players))

//prestart string
if GR != -1
  if !GR.prepared {
    s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(800, 400, s)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
