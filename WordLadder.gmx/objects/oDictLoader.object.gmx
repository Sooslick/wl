<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//general switches
loaded = false      //ditionary loaded
init = false        //connection initialised. If false, dict will not load
readMain = true     //read from main flag (true main, false extra)
onlyMain = true     //if extra dict exists

//files
f = -1              //opened dict file
fe = -1             //opened extra dict file
lfn_main  = ""      //dict file path
lfn_extra = ""      //extra dict file path
lastPos = 0         //file position
finalSize = 1       //progress bar size
currSize = 0        //progress

//dictionary data
locale = global.profile[?'PLOCALE']
LoadedHash = 'AA'   //path to second level list
tmpm = -1           //first level map
tmpl = -1           //second level list

//loading
timeEndTick = 0                         //timestamp limiter
tickTimeConst = 1000 / room_speed + 1   //time per tick limiter
loadRot = 0
loadStr = 'Initialization'

//links
parent = -1         //GameRuler Object
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loadRot+= 5
//skip event if !init
if !init
  exit

if !loaded
  {
  //loading time calc
  timeEndTick = current_time + tickTimeConst  //load time limiter
  //loading progbar calc
  var fbp = file_bin_position(f);
  if fbp &gt; lastPos
    currSize+= fbp - lastPos
  lastPos = fbp
  //loader cycle
  while (current_time &lt; timeEndTick)          //while time limit not reached
    {
    //check eof
    if file_bin_position(f) &gt;= file_bin_size(f) //old finalSize
      {
      file_bin_close(f)
      //check read progress: switch to next file or set loaded=true
      if readMain
        {
        if onlyMain
          loaded = true
        else
          {
          readMain = false
          f = fe
          loadStr = 'Loading new data'
          }
        }
      else
        loaded = true
      break
      }
    var q = file_bin_read_byte(f)   //next word length
    var s = ''                      //next word
    //todo locale check!
    //word too shoft
    if q&lt;2
      {
      for (var i=0; i&lt;q; i++)       //skip; todo: use seek function
        file_bin_read_byte(f)
      continue
      }
    else
      for (var i=0; i&lt;q; i++)
        s+= chr(funcChrDecode(file_bin_read_byte(f)))   //read word
    
        //if loaded hash correct
    if (string_char_at(s,1) == string_char_at(LoadedHash,1)) &amp;&amp;  
       (string_char_at(s,2) == string_char_at(LoadedHash,2))
            ds_list_add(tmpl,s) 
    else
      {
      //get first lv map  
      tmpm = global.DictDS
      var c = string_char_at(s,1);
      if ds_map_exists(tmpm,c)
        tmpm = tmpm[? c]
      else
        continue
    
      //get sec lv map 
      var v = string_char_at(s,2) 
      if ds_map_exists(tmpm,v)
        tmpl = tmpm[? v]
      else
        continue   
      
      //put word
      ds_list_add(tmpl,s) 
      LoadedHash = c + v
      }
    }
  }
else
  {
  //exec post-load event
  global.DictLoaded = locale
  with (parent) {event_user(0)}
  instance_destroy(self,true)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dict loader setup</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//locale setup
if global.DictLoaded != locale    //if !loaded or loaded smth else
  {
  //pre-define filename
  switch locale
    {
    case 0: 
      lfn_main  = "dict/EN.dat"; 
      lfn_extra = "dict/EN_extra.dat"
      break
    //case 1: too
    }
  //destroy prev hashmaps. TODO: check locale!
  if global.DictDS != -1 {
    for (var i=65; i&lt;=90; i++)  
      {
      tmpm = global.DictDS[?i]
      //second level hashmap
      for (var j=65; j&lt;=90; j++) 
        {
        tmpl = tmpm[?j]
        ds_list_destroy(tmpl)
        }
      ds_map_destroy(tmpm)
      } 
    ds_map_destroy(global.DictDS)
    }
  //pre-define hashmaps
  global.DictDS = ds_map_create()
  //first level hashmaps
  for (var i=65; i&lt;=90; i++)  
    {
    tmpm = ds_map_create();
    //second level hashmap
    for (var j=65; j&lt;=90; j++) 
      {
      tmpl = ds_list_create();
      ds_map_add_list(tmpm, chr(j), tmpl)
      }
    ds_map_add_map(global.DictDS, chr(i), tmpm)
    } 
  LoadedHash = 'ZZ'
  
  //prepare dict file to read   
  f = file_bin_open(lfn_main,0)
  var fe_size = 0;
  if file_exists(lfn_extra) 
    {
    fe = file_bin_open(lfn_extra,0)
    fe_size = file_bin_size(fe)
    onlyMain = false
    }
  //TODO check if file missing or broken
  finalSize = file_bin_size(f) + fe_size
  currSize = file_bin_position(f)
  loadStr = 'Loading main data'
  }
else
  {
  loaded = true
  finalSize = 1
  currSize = 1
  }
init = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//loading progbar
drawTextPreset(fHint, c_red, 1, fa_right, fa_center)
draw_line_width(0,10,1600,10,16)

draw_set_color(c_white)
if init
    {
    //loading progbar current
    draw_line_width(0,10,currSize/finalSize*1600,10,10)
    //loading rotator
    if !loaded
      drawLoading(loadRot)
    }
else
    drawLoading(loadRot)
    
//loading comment
draw_set_alpha(0.7)
draw_text(1440,80,loadStr)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
