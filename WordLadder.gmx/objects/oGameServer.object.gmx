<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>server = network_create_server(network_socket_tcp, 27015, 10);
buffer_send = buffer_create(64, buffer_grow, 1);

GR = -1

Players = 1
Ready = 0

PlsArrSock[0] = 0               //send socket array
PlsArrIP[0] = 'localhost'
PlsArrPing[0] = 0               
PlsArrName[0] = global.profile[?'PNAME']
PlsArrID[0] = global.profile[?'PNETID']
PlsArrWord[0] = ''
PlsArrScore[0] = 0
PlsArrShift[0] = false
PlsArrUnban[0] = -1
//stat fields

PingTimestamp = 0
PingTimer = 30

BRestart = -1

ChatActive = false
Chat = instance_create(800,200,oGameChat)
Chat.parent = id

//TODO Api request
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 17)  
buffer_write(buffer_send, buffer_string, 'Server shut down')  
for (i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    
network_destroy(server)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PingTimer--
if PingTimer == 0
  {
  PingTimer = 100
  //ping
  for (var i=1; i &lt; Players; i++)
    {
    PingTimestamp = current_time
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 2)
    buffer_write(buffer_send, buffer_s32, PingTimestamp)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
  //ping value broadcast
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 4)
  buffer_write(buffer_send, buffer_s8, Players)
  for (var i=0; i&lt;Players; i++)
    buffer_write(buffer_send, buffer_s32, PlsArrPing[i])
  for (var i=1; i &lt; Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  //prestart timer sync
  if GR != -1
    {
    if !GR.prepared
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 11)
      buffer_write(buffer_send, buffer_s32, GR.BTimer)
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      }
    //start timer sync
    else
      {
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 12)
      buffer_write(buffer_send, buffer_s32, GR.Timer)
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BRestart != -1
  if BRestart.clicked
    {
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 19)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    network_destroy(server)
    action_another_room(rGame)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");

//TODO SENDID FIX

if type = network_type_connect
  {                   
  PlsArrSock[Players] = sock;
  PlsArrIP[Players] = ip; 
  PlsArrName[Players] = '[ connecting ]'
  PlsArrPing[Players] = 999
  PlsArrWord[Players] = ''
  PlsArrScore[Players] = 0
  PlsArrShift[Players] = false
  PlsArrUnban[Players] = -1
  Players++
  parent.tc.online = true
  }
else if type = network_type_data
  {  
  for (var i=0; i &lt; Players; i++)
    if eid == PlsArrSock[i]
      {
      eid = i
      break
      }
  
  var header = buffer_read(msg_buff, buffer_s8); 
  switch(header)
    {
    //client info socket
    case 0:
      var gv = buffer_read(msg_buff, buffer_s32)
      if gv != global.GameVersion
        //todo errmsg
        {
        break
        }
      PlsArrID[eid] = buffer_read(msg_buff, buffer_s32)
      PlsArrName[eid] = buffer_read(msg_buff, buffer_string)
      
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 1)
      buffer_write(buffer_send, buffer_s8, global.GameType)
      buffer_write(buffer_send, buffer_s8, global.profile[?'PLOCALE'])
      buffer_write(buffer_send, buffer_s8, eid)
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //client ping pong answer
    case 3:
      var pong = buffer_read(msg_buff, buffer_s32)
      if pong != PingTimestamp
        {}          //TODO Force disconnect plr
      pong = buffer_read(msg_buff, buffer_s32)
      PlsArrPing[eid] = current_time - PingTimestamp
      break
      
    //client plr info       //request
    case 5:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 6)
      buffer_write(buffer_send, buffer_s8, Players)
      for (var i=0; i&lt;Players; i++)
        {
        buffer_write(buffer_send, buffer_s32, PlsArrID[i])
        buffer_write(buffer_send, buffer_string, PlsArrName[i])
        }
      for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break
      
    //requested game rules
    case 8:
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 7)
      buffer_write(buffer_send, buffer_string, json_encode(global.custom))
      network_send_packet( eid, buffer_send, buffer_tell(buffer_send) );
      break
    
    //player clicked "begin" button  
    case 9:
      if GR.prepared
        {
        buffer_seek(buffer_send, buffer_seek_start, 0);
        buffer_write(buffer_send, buffer_s8, 12)
        buffer_write(buffer_send, buffer_s32, GR.Timer)
        for (var i=1; i&lt;Players; i++)
          network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
        //send game info only for eid
        //send word history
        }
      else
        {
        Ready++
        if Players == Ready
          {
          GR.prepared = true
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 12)
          buffer_write(buffer_send, buffer_s32, GR.Timer)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        else
          {
          GR.prestart = true
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 10)
          buffer_write(buffer_send, buffer_s8, Ready)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
        }
      break
    
    //player input
    case 13:
      buffer_read(msg_buff, buffer_s8)      //TT
      buffer_read(msg_buff, buffer_bool)    //shift
      var enter = buffer_read(msg_buff, buffer_bool);
      var word = buffer_read(msg_buff, buffer_string);
      PlsArrWord[eid] = word
      if enter &amp;&amp; checkWord(word,GR)
          {
          GR.currWord = word
          GR.Cube.w1 = word
          PlsArrScore[eid]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(GR.currWord)
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 14)
          buffer_write(buffer_send, buffer_s8, eid)
          buffer_write(buffer_send, buffer_bool, true)
          buffer_write(buffer_send, buffer_string, word)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          with GR {event_user(1)}
          for (var i=0; i&lt;Players; i++)
            PlsArrWord[i] = ''
          }
      else
          {
          buffer_seek(buffer_send, buffer_seek_start, 0);
          buffer_write(buffer_send, buffer_s8, 14)
          buffer_write(buffer_send, buffer_s8, eid)
          buffer_write(buffer_send, buffer_bool, false)
          buffer_write(buffer_send, buffer_string, word)
          for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
          }
      break 
    
    //chat str
    case 20:
      Chat.GotStr = PlsArrName[eid] + ': ' + buffer_read(msg_buff, buffer_string);
      with Chat {event_user(0)}
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 20)
      buffer_write(buffer_send, buffer_string, Chat.GotStr)
      for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
      break
    }
  }
else if type = network_type_disconnect
  {
  for (var i=0; i&lt;Players; i++)
    if sock == PlsArrSock[i]
      {
      eid = i
      break
      }
    
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 18)
  buffer_write(buffer_send, buffer_s8, eid)
  for (var i=1; i&lt;Players; i++)
    network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
  
  for (var i = eid; i &lt; Players-1; i++)
    {
    PlsArrSock[i] = PlsArrSock[i+1]
    PlsArrIP[i] = PlsArrIP[i+1]
    PlsArrPing[i] = PlsArrPing[i+1]
    PlsArrName[i] = PlsArrName[i+1]
    PlsArrID[i] = PlsArrID[i+1]
    PlsArrWord[i] = PlsArrWord[i+1]
    PlsArrScore[i] = PlsArrScore[i+1]
    PlsArrShift[i] = PlsArrShift[i+1]
    PlsArrUnban[i] = PlsArrUnban[i+1]
    }
  Players--
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>chat event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chat.GotStr = PlsArrName[0] + ': ' + Chat.PendingStr
      with Chat {event_user(0)}
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 20)
      buffer_write(buffer_send, buffer_string, Chat.GotStr)
      for (var i=1; i&lt;Players; i++)
            network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Gameover event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BRestart = instance_create(1328,1100,oButton)
BRestart.content = 'RESTART'

//Stat passed from GameRuler in endgame event
var bestpl = -1;
var bestsc = -1;
for (var i=0; i&lt;Players; i++)
  if PlsArrScore[i] &gt; bestsc
    {
    bestpl = i
    bestsc = PlsArrScore[i]
    }
var s = 'BEST PLAYER:#';
s+= PlsArrName[bestpl]
s+= '##SCORE:#'
s+= string(PlsArrScore[bestpl])
Stat.s = s
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ban &amp; Green broadcast</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 15)            //header
buffer_write(buffer_send, buffer_s8, GR.MinLen)     //length

var B = ds_list_size(GR.TabuList);
var G = ds_list_size(GR.TargetList);
var S = '';
for (var i=0; i&lt;B; i++)
  S+= GR.TabuList[|i]
for (var i=0; i&lt;G; i++)
  S+= GR.TargetList[|i]

buffer_write(buffer_send, buffer_s8, B)             //Banned qty
buffer_write(buffer_send, buffer_s8, G)             //Greens Qty
buffer_write(buffer_send, buffer_string, S)         //Banned + Greens char sequence
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pressed enter</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlsArrScore[0]+= GR.words + (GR.Timer div 1800) * GR.MinLen + string_length(GR.currWord)
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 14)
buffer_write(buffer_send, buffer_s8, 0)
buffer_write(buffer_send, buffer_bool, true)
buffer_write(buffer_send, buffer_string, GR.currWord)
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
with GR {event_user(1)}
GR.waiting = false
for (var i=0; i&lt;Players; i++)
  PlsArrWord[i] = ''

buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 16)
buffer_write(buffer_send, buffer_s8, Players)
for (var i=0; i&lt;Players; i++)
  buffer_write(buffer_send, buffer_s32, PlsArrScore[i])
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>input event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 14)
buffer_write(buffer_send, buffer_s8, 0)
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_string, GR.currWord)
for (var i=1; i&lt;Players; i++)
  network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ready++
if Players == Ready
    {
    GR.prepared = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 12)
    buffer_write(buffer_send, buffer_s32, GR.Timer)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
else
    {
    GR.prestart = true
    buffer_seek(buffer_send, buffer_seek_start, 0);
    buffer_write(buffer_send, buffer_s8, 10)
    buffer_write(buffer_send, buffer_s8, Ready)
    for (var i=1; i&lt;Players; i++)
        network_send_packet( PlsArrSock[i], buffer_send, buffer_tell(buffer_send) );
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit

draw_set_font(fCube)
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_valign(fa_bottom)

draw_text(1595,550,'Players: ' + string(Players))

//ping column
for (var i=0; i&lt;Players; i++)
  draw_text(1595,485-i*65,string(PlsArrPing[i]))

//name column
for (var i=0; i&lt;Players; i++)
  draw_text(1500,485-i*65,PlsArrName[i])
  
//score column
draw_set_alpha(0.8)
for (var i=0; i&lt;Players; i++)
  draw_text(1100,485-i*65,string(PlsArrScore[i]))
  
//word column
draw_set_alpha(0.6)
for (var i=0; i&lt;Players; i++)
  draw_text(1000,485-i*65,PlsArrWord[i])

//prestart string
if GR != -1
  if !GR.prepared
    {
    s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players)
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(800, 400, s)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
