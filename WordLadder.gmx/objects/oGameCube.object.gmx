<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MinLen = 0
NewLen = 0
w1 = ''
w2 = ''
w3 = ''
w4 = ''
TabuList = -1
TargetList = -1

Approach = true             //Approach Animation
ApproachScale = 2.0
Rot = false                 //Otherclockwise animation
RotDeg = 0
Shift = false               //height correction anim
ShiftY = 0
ShiftX = 0
NewWord = true              //new word approach animation
NewWordX = 0
Tabu = false
TabuProg = 0
Target = false
TargetProg = 0
TabuErr = false
TabuErrNum = -1
LengthErr = false
LengthErrTick = 0

Shifted = false
aps = 1                     //alpha per square
ds = -1                     //draw surface

ApplyBw = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Approach
  {
  ApproachScale-=0.03
  if ApproachScale&lt;=1
    {
    Approach = false
    ApproachScale = 1
    }
  }
if Rot
  {
  RotDeg+=3
  if RotDeg&gt;=90
    {
    RotDeg = 0
    w4 = w3
    if Shifted
      w3 = string_copy(w2,1,string_length(w2)-1)
    else
      w3 = w2
    w2 = w1
    w1 = string_char_at(w1,string_length(w1))
    ShiftY = (string_length(w2) - MinLen)*32
    ShiftX = (NewLen - MinLen)*32
    x+= ShiftX
    y-= ShiftY
    ShiftY+= ShiftX
    MinLen = NewLen
    Shift = true
    NewWord = true
    Tabu = true
    NewWordX = 0
    Rot = false
    Shifted = false
    }
  if w4 != ''
    aps = 1 / (string_length(w2)-shoff-1 + string_length(w3)-1 + string_length(w4)*((90-RotDeg)/90) -2)
  else
    aps = 0.1
  }
if Shift
  {
  if ShiftY &gt; 0
    {
    y+= 4
    ShiftY-= 4
    }
  else if ShiftY &lt; 0
    {
    y-= 4
    ShiftY+= 4
    }
  else if ShiftX &gt; 0
    {
    x-= 2
    ShiftX-= 2
    }
  else if ShiftX &lt; 0
    {
    x+= 2
    ShiftX+= 2
    }
  else
    Shift = false
  }
if NewWord
  {
  if string_length(w1) &gt; MinLen
    tmp = string_length(w1)
  else
    tmp = MinLen
  if NewWordX &lt; tmp*64
    NewWordX+= 16
  else if NewWordX &gt; tmp*64
    NewWordX-= 16
  else
    NewWord = false
  }
if (Tabu) &amp;&amp; (TabuList != -1)
  {
  TabuProg++
  if TabuProg &gt;= ds_list_size(TabuList)*10
    {
    TabuProg = 0
    Tabu = false
    Target = true
    }
  }
if (Target) &amp;&amp; (TargetList != -1)
  {
  TargetProg++
  if TargetProg &gt;= ds_list_size(TargetList)*10
    {
    TargetProg = 0
    Target = false
    }
  }
if LengthErr
  {
  LengthErrTick++
  if LengthErrTick &gt;= 32
    {
    LengthErrTick = 0
    LengthErr = false
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fCube)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_alpha(1)

//pre-set surface
if !surface_exists(ds)
  ds = surface_create(1600,1600)    //a
surface_set_target(ds)
var sx = 512;
var sy = 800;
draw_clear_alpha(0,0)

//pre-computing
if Shifted
  shoff = 1
else
  shoff = 0

if ApplyBw
  shader_set(shBw)
 
//fader circle
//draw_sprite_ext(sFadedCircle,0,x,y,MinLen*2.28,MinLen*2.28,0,0,1)  
//player never see hints with this circle  

//w1
j = MinLen*32 - 32
if string_length(w1) &gt; MinLen
  tmp = string_length(w1)
else
  tmp = MinLen
for (i=0; i&lt;tmp; i++)
  {
  xd = sx-j+64*i
  yd = sy-j
  if Rot
    {
    dist=point_distance(sx,sy,xd,yd)
    currrot=degtorad(point_direction(sx,sy,xd,yd)+RotDeg)  
    xd=sx+dist*cos(currrot)
    yd=sy-dist*sin(currrot)
    }
  draw_sprite_ext(sSquareCenter,0, xd, yd, ApproachScale,ApproachScale,RotDeg,c_white,1)       
  draw_text_transformed(xd,yd,string_char_at(w1,i+1), 1,1,RotDeg)
  }
//faded sq
if (string_length(w1) &gt;= MinLen) &amp;&amp; !Rot
  draw_sprite_ext(sSquareCenter,2, xd+64, yd, 1,1,RotDeg,c_white,1)  
//error 
if LengthErr
  {
  a = (0.52 - (LengthErrTick*0.015))
  draw_sprite_ext(sPixel,0,sx-j-32,yd-32,tmp*64,64,0,c_red,a)
  }
//newword fading
if !Rot &amp;&amp; !Approach &amp;&amp; NewWord
  {
  draw_sprite_ext(sSquareFaded,0,sx-j+NewWordX-32,sy-j-32,0.25,0.25,RotDeg,c_black,1) 
  draw_sprite_ext(sPixel,0,sx-j+NewWordX+32,sy-j-32,tmp*64-NewWordX,64,0,c_black,1)
  }
  
if w2 != ''
  {
  if Shifted
    {
    xd = sx-j
    yd = sy-j-64
    if Rot
      {
      dist=point_distance(sx,sy,xd,yd)
      currrot=degtorad(point_direction(sx,sy,xd,yd)+RotDeg)  
      xd=sx+dist*cos(currrot)
      yd=sy-dist*sin(currrot)
      }
    draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,1)       
    draw_text_transformed(xd,yd,string_char_at(w2,string_length(w2)), 1,1,RotDeg+90)
    //TODO fade out while ROT
    }
  for (i=1; i&lt;string_length(w2)-shoff; i++)
    {
    xd = sx-j
    yd = sy-j+64*i
    if Rot
      {
      dist=point_distance(sx,sy,xd,yd)
      currrot=degtorad(point_direction(sx,sy,xd,yd)+RotDeg)  
      xd=sx+dist*cos(currrot)
      yd=sy-dist*sin(currrot)
      }
    draw_set_alpha(draw_get_alpha()-aps)
    draw_sprite_ext(sSquareCenter,0,xd,yd,1,1,RotDeg,c_white,draw_get_alpha()) 
    draw_text_transformed(xd,yd,string_char_at(w2,string_length(w2)-i-shoff), 1,1,RotDeg+90)
    }
  }
  
//w3
if w3 != ''
  {
  for (i=1; i&lt;string_length(w3); i++)
    {
    xd = sx-j+64*i
    yd = sy-j+(string_length(w2)-1-shoff)*64
    if Rot
      {
      dist=point_distance(sx,sy,xd,yd)
      currrot=degtorad(point_direction(sx,sy,xd,yd)+RotDeg)  
      xd=sx+dist*cos(currrot)
      yd=sy-dist*sin(currrot)
      }
    draw_set_alpha(draw_get_alpha()-aps)
    draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,draw_get_alpha()) 
    draw_text_transformed(xd, yd,string_char_at(w3,string_length(w3)-i), 1,1,RotDeg+180)
    }
  }

//w4    
if (w4 != '')
  {
  i=1
  while (draw_get_alpha() &gt; 0)
    {
    xd = sx-j+(string_length(w3)-1)*64
    yd = sy-j+(string_length(w2)-1-shoff)*64-i*64
    if Rot
      {
      dist=point_distance(sx,sy,xd,yd)
      currrot=degtorad(point_direction(sx,sy,xd,yd)+RotDeg)  
      xd=sx+dist*cos(currrot)
      yd=sy-dist*sin(currrot)
      }
    draw_set_alpha(draw_get_alpha()-aps)
    draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,draw_get_alpha()) 
    draw_text_transformed(xd, yd, string_char_at(w4,string_length(w4)-i), 1,1,RotDeg+270)
    i++
    } 
  }  
surface_reset_target()

var xt = x + shoff * 72
//TabuList
if TabuList != -1
{
draw_set_alpha(1)
if !Rot
  {
  if Tabu
    {
    tmp = TabuProg
    i = 0
    while tmp &gt; 0
      {
      if tmp &gt;= 10
        {
        draw_set_alpha(1)
        draw_text(xt-j+i*72, y-j-100, TabuList[| i])
        draw_sprite(sSquareTabu,0,xt-j+i*72, y-j-100)
        }
      else
        {
        draw_set_alpha(1/(10-tmp))
        draw_text_transformed(xt-j+i*72, y-j-100, TabuList[| i],(5-tmp/2)+0.5,(5-tmp/2)+0.5,0)
        draw_sprite_ext(sSquareTabu,0,xt-j+i*72, y-j-100, (5-tmp/2)+0.5, (5-tmp/2)+0.5, 0,c_white,draw_get_alpha())
        }
      tmp-= 10
      i++
      }
    }
  else
    for (i=0; i&lt;ds_list_size(TabuList); i++)
      {
      draw_text(xt-j+i*72, y-j-100, TabuList[| i])
      if (TabuErrNum == i) &amp;&amp; (TabuErr)
        draw_sprite(sSquareTabu,1,xt-j+i*72, y-j-100)
      else
        draw_sprite(sSquareTabu,0,xt-j+i*72, y-j-100)
      }
  }
}
if TargetList != -1
{
//target list
draw_set_alpha(1)
draw_set_color(c_green)
xt+= 10
if !Rot &amp;&amp; !Tabu
  {
  var k = 0
  if Target
    {
    tmp = TargetProg
    while tmp &gt; 0
      {
      if tmp &gt;= 10
        {
        draw_set_alpha(1)
        draw_text(xt-j+i*72, y-j-100, TargetList[| k])
        }
      else
        {
        draw_set_alpha(1/(10-tmp))
        draw_text_transformed(xt-j+i*72, y-j-100, TargetList[| k],(5-tmp/2)+0.5,(5-tmp/2)+0.5,0)
        }
      tmp-= 10
      i++
      k++
      }
    }
  else
    for (k=0; k&lt;ds_list_size(TargetList); k++)
      {
      draw_text(xt-j+i*72, y-j-100, TargetList[| k])
      i++
      }
  }
}

shader_reset()

var dlen = string_length(w1) - (MinLen div 2);
if dlen &gt; 16
  dlen = 16
var ssc = 1;
var sdy = 0;
if dlen &gt; 7.49
  {
  ssc = 7.49 / dlen
  sdy = (string_length(w2) / 2) * 64
  sdy = (sdy - sdy*ssc)
  }
  
shader_set(shLinear)
var shader_params = shader_get_uniform(shLinear, "tense");
shader_set_uniform_f(shader_params, 0.9);
draw_surface_ext(ds,x-sx*2,y-sy*1.8,2,2,0,c_white,0.08)
shader_reset()  
  
draw_set_alpha(1)
draw_surface_ext(ds,x-sx*ssc,y-sy*ssc-sdy,ssc,ssc,0,c_white,1)
//draw_surface(ds,x-sx,y-sy)
//TODO: scale anim + adekvate scale calculation

//debug
//draw_set_color(c_white)
//draw_line(0,y,1600,y)
//draw_line(0,600,1600,600)
//draw_line(x,0,x,1200)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
