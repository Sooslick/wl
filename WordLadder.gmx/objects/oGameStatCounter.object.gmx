<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//game's counters
pp = 0                      //score
words = 0
letters = 0                 //total
lettersa = 0                //accepted
lettersb = 0                //backspaced
attempts = 0                //input attempts
ticks = 0                   //gametime
hints = 0                   //abilities
shiftsa = 0
shiftsu = 0
unbansa = 0
unbansu = 0
banned = 0                  //banned letters total
tabus = 0                   //fails
dicts = 0
prevs = 0
lens = 0
avg = 0

sc = 1

success = false

//tech active swithes
active = false
B1 = -1
s = ''
sCaption = ''
ShowPage = 0                //0: general;  1: letters;  2: abilities;  3: fails
ShowPageTick = 0

//in-game animations
ShiftA = false
ShiftATick = 0
ShiftU = false
ShiftUTick = 0
TTA = false
TTATick = 0
TTU = false
TTUTick = 0

//TODO more stats
LenMap = ds_map_create()
ds_map_clear(LenMap)
LenWord = ''

//special
sSpec[0] = ''
sSpec[1] = ''
sSpec[2] = ''
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active
  {
  ShowPageTick++
  if ShowPageTick == 180
    {
    ShowPage++
    event_user(1)
    ShowPageTick = 0
    }
  //TODO hilights
  }
else
  {
  if ShiftA
    {
    ShiftATick += 16
    if ShiftATick &gt;= 256
      {
      ShiftATick = 0
      ShiftA = false
      }
    }
  if ShiftU
    {
    ShiftUTick += 16
    if ShiftUTick &gt;= 256
      {
      ShiftUTick = 0
      ShiftU = false
      }
    }
  if TTA
    {
    TTATick += 16
    if TTATick &gt;= 256
      {
      TTATick = 0
      TTA = false
      }
    }
  if TTU
    {
    TTUTick += 16
    if TTUTick &gt;= 256
      {
      TTUTick = 0
      TTU = false
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if B1 &gt; 0
  if B1.clicked
    {
    funcProfileWrite()
    action_another_room(rMenu)
    }
  else
    {
    if mouse_x &gt; 800
      ShowPage++
    else
      ShowPage--
    ShowPageTick = 0
    event_user(1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//LenMap word add
LenCurr = LenMap[?string_length(LenWord)]
if is_undefined(LenCurr)
  {
  LenCurr = ds_map_create()
  ds_map_clear(LenCurr)
  for (tmp=0; tmp&lt;26; tmp++)
    LenCurr[?funcChrDecode(tmp)] = 0
  LenMap[?string_length(LenWord)] = LenCurr
  }
LenCurr[?ord(string_char_at(LenWord,1))]++

//debug
//clipboard_set_text(json_encode(LenMap))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ShowPage increment
if ShowPage &lt; 0
  ShowPage = 5
else if ShowPage &gt; 5
  ShowPage = 0
switch ShowPage
  {
  case 1:
    sCaption = 'LETTERS'
    s = 'TYPED TOTAL: '     + string(letters)
    s+= '#ACCEPTED: '       + string(lettersa)
    s+= '#BACKSPACED: '     + string(lettersb)
    s+= '#BANNED: '         + string(banned)
    s+= '#INPUT ATTEMPTS: ' + string(attempts)
    sc = 1
    break
  case 2:
    sCaption = 'SPECIAL ABILITIES'
    s = 'HINTS SHOWN: '      + string(hints)
    s+= '#SHIFTS ACQUIRED: ' + string(shiftsa)
    s+= '#SHIFTS USED: '     + string(shiftsu)
    s+= '#UNBANS ACQUIRED: ' + string(unbansa)
    s+= '#UNBANS USED: '     + string(unbansu)
    sc = 1
    break
  case 3:
    sCaption = 'WRONG WORDS'
    s = 'TYPOS: '      + string(dicts)
    s+= '#REPEATS: '   + string(prevs)
    s+= '#TABOOS: '    + string(tabus)
    s+= '#TOOSHORTS: ' + string(lens)
    sc = 1
    break
  case 4:
    sCaption = "WORD'S LENGTH"
    var lines = 2
    var src = ds_map_find_first(LenMap);      //src = key
    var dest;                                 //dest = map
    var qty;
    s = ''
    while (!is_undefined(src))
      {
      qty = 0;
      dest = LenMap[?src]
      for(i=0; i&lt;26; i++)
        qty+= dest[?funcChrDecode(i)]
      s+= string(src) + ': ' + string(qty) + '#'
      lines++
      src = ds_map_find_next(LenMap,src)
      }
    if lines &gt; 6
      sc = (6+lines/10) / lines
    else
      sc = 1
    break
  case 5:
    sCaption = "WORD THAT START WITH"
    sSpec[0] = '##'
    sSpec[1] = '##'
    sSpec[2] = '##'
    var pos = 0;
    for(i=0; i&lt;26; i++)
      {
      var src = ds_map_find_first(LenMap);
      var dest;
      var qty = 0;
      while (!is_undefined(src))
        {
        dest = LenMap[?src]
        qty+= dest[?funcChrDecode(i)]
        src = ds_map_find_next(LenMap,src)
        }
      sSpec[pos]+= chr(funcChrDecode(i)) + ': ' + string(qty) + '#'
      pos++
      if pos &gt; 2
        {
        pos = 0
        s+= '#'
        }
      }
    sSpec[2]+= '#'
    sc = 0.65
    break
  default:
    sCaption = 'OVERALL RATE'
    s = 'PLAYTIME: '             + formatTimeString(ticks)
    s+= '#ACCEPTED WORDS: '      + string(words)
    s+= '#TOTAL LETTERS TYPED: ' + string(letters)
    s+= '#SCORE: '               + string(pp)
    sc = 1
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gameover event
B1 = instance_create(800,1100,oButton)  //TODO checlk gamemode
B1.content = 'BACK'
active = true

sCaption = 'OVERALL RATE'
s =  'PLAYTIME: '            + formatTimeString(ticks)
s+= '#ACCEPTED WORDS: '      + string(words)
s+= '#TOTAL LETTERS TYPED: ' + string(letters)
s+= '#SCORE: '               + string(pp)

global.profile[?'PSENDS']++

//Profile Stat Write
//Current gamemode last game
SECTMAP = global.profile[?'PSSECTIONS']
CURRMAP = SECTMAP[?GameTypeID+1]
if is_undefined(CURRMAP)
  {
  CURRMAP = ds_map_create()
  ds_map_clear(CURRMAP)
  SECTMAP[?GameTypeID+1] = CURRMAP
  }
CURRMAP[?'PSPLAYTIME'] = ticks
CURRMAP[?'PSGAMES'] = 1
CURRMAP[?'PSWORDS'] = words
CURRMAP[?'PSINPUTS'] = attempts
CURRMAP[?'PSLETTERS'] = letters
CURRMAP[?'PSLETTERSA'] = lettersa
CURRMAP[?'PSLETTERSB'] = lettersb
CURRMAP[?'PSHINTS'] = hints
CURRMAP[?'PSSHIFTSA'] = shiftsa
CURRMAP[?'PSSHIFTSU'] = shiftsu
CURRMAP[?'PSBANNED'] = banned
CURRMAP[?'PSUNBANSA'] = unbansa
CURRMAP[?'PSUNBANSU'] = unbansu
CURRMAP[?'PSBANTYPED'] = tabus
CURRMAP[?'PSSHORTTYPED'] = lens
CURRMAP[?'PSWRONGTYPED'] = dicts
CURRMAP[?'PSREPTYPED'] = prevs
CURRMAP[?'PSLENAVERAGE'] = 0
CURRMAP[?'PSLENGTHMAP'] = ds_map_create()
ds_map_copy(CURRMAP[?'PSLENGTHMAP'], LenMap)

//OVERALL GAMEMODE
OVERMAP = SECTMAP[?GameTypeID]
if is_undefined(OVERMAP)
  {
  OVERMAP = ds_map_create()
  ds_map_copy(OVERMAP,SECTMAP[?GameTypeID+1])
  SECTMAP[?GameTypeID] = OVERMAP
  }
else
  {
  OVERMAP[?'PSPLAYTIME']+= CURRMAP[?'PSPLAYTIME']
  OVERMAP[?'PSGAMES']+= CURRMAP[?'PSGAMES']
  OVERMAP[?'PSWORDS']+= CURRMAP[?'PSWORDS']
  OVERMAP[?'PSINPUTS']+= CURRMAP[?'PSINPUTS']
  OVERMAP[?'PSLETTERS']+= CURRMAP[?'PSLETTERS']
  OVERMAP[?'PSLETTERSA']+= CURRMAP[?'PSLETTERSA']
  OVERMAP[?'PSLETTERSB']+= CURRMAP[?'PSLETTERSB']
  OVERMAP[?'PSHINTS']+= CURRMAP[?'PSHINTS']
  OVERMAP[?'PSSHIFTSA']+= CURRMAP[?'PSSHIFTSA']
  OVERMAP[?'PSSHIFTSU']+= CURRMAP[?'PSSHIFTSU']
  OVERMAP[?'PSBANNED']+= CURRMAP[?'PSBANNED']
  OVERMAP[?'PSUNBANSA']+= CURRMAP[?'PSUNBANSA']
  OVERMAP[?'PSUNBANSU']+= CURRMAP[?'PSUNBANSU']
  OVERMAP[?'PSBANTYPED']+= CURRMAP[?'PSBANTYPED']
  OVERMAP[?'PSSHORTTYPED']+= CURRMAP[?'PSSHORTTYPED']
  OVERMAP[?'PSWRONGTYPED']+= CURRMAP[?'PSWRONGTYPED']
  OVERMAP[?'PSREPTYPED']+= CURRMAP[?'PSREPTYPED']
  OVERMAP[?'PSLENAVERAGE'] = 0
  //TODO DEBUG LETTERS
  OVERMAP = OVERMAP[?'PSLENGTHMAP']
  var src = ds_map_find_first(LenMap);      //src = key
  var dest;                                 //dest = map
  while (!is_undefined(src))
    {
    dest = OVERMAP[?src]
    if is_undefined(dest)
      {
      dest = ds_map_create()
      ds_map_copy(dest,LenMap[?src])
      ds_map_add(OVERMAP,src,dest)
      }
    else
      {
      tmp = LenMap[?src]
      for(i=0; i&lt;26; i++)
        dest[?funcChrDecode(i)]+= tmp[?funcChrDecode(i)]
      }
    src = ds_map_find_next(LenMap,src)
    }
  }
  
//OVERALL GAME
OVERMAP = SECTMAP[?0]
if is_undefined(OVERMAP)
  {
  OVERMAP = ds_map_create()
  ds_map_copy(OVERMAP,SECTMAP[?GameTypeID+1])
  SECTMAP[?0] = OVERMAP
  }
else
  {
  OVERMAP[?'PSPLAYTIME']+= CURRMAP[?'PSPLAYTIME']
  OVERMAP[?'PSGAMES']+= CURRMAP[?'PSGAMES']
  OVERMAP[?'PSWORDS']+= CURRMAP[?'PSWORDS']
  OVERMAP[?'PSINPUTS']+= CURRMAP[?'PSINPUTS']
  OVERMAP[?'PSLETTERS']+= CURRMAP[?'PSLETTERS']
  OVERMAP[?'PSLETTERSA']+= CURRMAP[?'PSLETTERSA']
  OVERMAP[?'PSLETTERSB']+= CURRMAP[?'PSLETTERSB']
  OVERMAP[?'PSHINTS']+= CURRMAP[?'PSHINTS']
  OVERMAP[?'PSSHIFTSA']+= CURRMAP[?'PSSHIFTSA']
  OVERMAP[?'PSSHIFTSU']+= CURRMAP[?'PSSHIFTSU']
  OVERMAP[?'PSBANNED']+= CURRMAP[?'PSBANNED']
  OVERMAP[?'PSUNBANSA']+= CURRMAP[?'PSUNBANSA']
  OVERMAP[?'PSUNBANSU']+= CURRMAP[?'PSUNBANSU']
  OVERMAP[?'PSBANTYPED']+= CURRMAP[?'PSBANTYPED']
  OVERMAP[?'PSSHORTTYPED']+= CURRMAP[?'PSSHORTTYPED']
  OVERMAP[?'PSWRONGTYPED']+= CURRMAP[?'PSWRONGTYPED']
  OVERMAP[?'PSREPTYPED']+= CURRMAP[?'PSREPTYPED']
  OVERMAP[?'PSLENAVERAGE'] = 0
    OVERMAP = OVERMAP[?'PSLENGTHMAP']
  var src = ds_map_find_first(LenMap);      //src = key
  var dest;                                 //dest = map
  while (!is_undefined(src))
    {
    dest = OVERMAP[?src]
    if is_undefined(dest)
      {
      dest = ds_map_create()
      ds_map_copy(dest,LenMap[?src])
      ds_map_add(OVERMAP,src,dest)
      }
    else
      {
      tmp = LenMap[?src]
      for(i=0; i&lt;26; i++)
        dest[?funcChrDecode(i)]+= tmp[?funcChrDecode(i)]
      }
    src = ds_map_find_next(LenMap,src)
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active
  {
  draw_set_font(fImpact64)
  draw_set_alpha(1)
  draw_set_color(c_white)
  draw_set_halign(fa_left)
  draw_set_valign(fa_center)
  
  if ShowPage == 5
    {
    draw_text_transformed(70,600,sSpec[0],sc,sc,0)
    draw_text_transformed(250,600,sSpec[1],sc,sc,0)
    draw_text_transformed(430,600,sSpec[2],sc,sc,0)
    }
  else
    draw_text_transformed(100,600,s,sc,sc,0)
    
  draw_set_font(fImpact96)
  draw_text(150,280,sCaption)
  
  if success
    {
    draw_set_font(fImpact96)
    draw_set_halign(fa_center)
    draw_text(800,100,'SUCCESS')
    }
  for (var i=0; i&lt;=5; i++)
      {
      if i == ShowPage
        draw_set_alpha(1)
      else
        draw_set_alpha(0.5)
      draw_circle(680+i*40,990,15,false)
      }
    var op = 0;
    if mouse_x &lt; 800
      op = 1
    else
      op = 0.5
    draw_sprite_ext(sArrowScroll,0,640,990,1,1,180,c_white,op)
    draw_sprite_ext(sArrowScroll,0,920,990,1,1,0,c_white,1.5-op)
  }
else
  {
  draw_set_font(fImpact64)
  draw_set_alpha(1)
  draw_set_color(c_white)
  draw_set_valign(fa_top)
  draw_set_halign(fa_right)
  draw_sprite_ext(sSquareFaded,0,1344,588,1,0.3,0,c_white,0.66)
  draw_text(1595,575,'Score: ' +string(pp))
  if ShiftA
    draw_set_color(make_color_rgb(ShiftATick,255,ShiftATick))
  else if ShiftU
    draw_set_color(make_color_rgb(255,ShiftUTick,ShiftUTick))
  draw_text(1595,645,'Shifts: '+string(parent.ShiftQty))
  if TTA
    draw_set_color(make_color_rgb(TTATick,255,TTATick))
  else if TTU
    draw_set_color(make_color_rgb(255,TTUTick,TTUTick))
  else draw_set_color(c_white)
  draw_text(1595,715,'Unbans: '+string(parent.TTQty))
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
