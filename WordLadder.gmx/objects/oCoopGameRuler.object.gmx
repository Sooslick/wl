<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OnclickEvent = 15
//cfg + general game vars
gameReadSettings()
gameSetGeneralVars()
//game objects and obj's vars (eg from cfg)
gameGeneralObjCreate(100)
gameSetFirstWord()
//fix Abil height
Abil.vert = 950
//other
loadRot = 0
preTimer = 30000
waiting = false       //waiting for server accepts word
myWord = false        //should ruler to write accepted word to stat
//Vote var  TODO refactor vote obj
Vote = false
VoteText = ''
VoteY = 0
VoteN = 0
Voted = false
VoteChoice = false  //false No; true Yes.
//Vote buttons objs
bVoteY = -1
bVoteN = -1

//debug
DecPB.visible = true
ShiftPB.visible = true
TTPB.visible = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BStart != -1
  instance_destroy(BStart, true)
if bBack != -1 {
  instance_destroy(bBack, true)
  instance_destroy(bEnd, true)
  }
if HintObj != -1
  instance_destroy(HintObj, true)
if bVoteY != -1 {
  instance_destroy(bVoteY, true)
  instance_destroy(bVoteN, true)
  }
instance_destroy(wl, true)
instance_destroy(l, true)
instance_destroy(Abil, true)
instance_destroy(Timer, true)
instance_destroy(DecPB, true)
instance_destroy(ShiftPB, true)
instance_destroy(TTPB, true)
instance_destroy(Cube, true)
instance_destroy(Bg, true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>loadRot += 5
if prepared {
  //timer
  if Timer.Timer&lt;=0 {
    Net.Stat = Stat
    Stat.Net = Net
    with Net event_user(4)
    instance_destroy(self, true)
    exit
    }
  //process hint
  if EnableHints {
    Think++
    //hint timers
    if HintTimer &gt; 0        //cooldown
      HintTimer--
    if Timer.Timer &lt; 20000  //20s
      HintTimeUp = true
    else if Think &gt; 6666     //2 minutes of thinking...
      HintTooLong = true
    if (HintTimeUp || HintTooLong) &amp;&amp; HintTimer==0  //create
      funcCreateHint()
    }
  Stat.ticks+= Timer.Interval
  }
//Auto-start after lobby timeout
else if prestart {
  preTimer-= Timer.Interval
  if preTimer &lt;= 0
    with Net event_user(0)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui clicked event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BStart &gt; 0 {
  if BStart.clicked {
    instance_destroy(BStart,true)
    BStart = -1
    with Net event_user(0)
    exit
    }
  }
if bBack != -1 {
  if bBack.clicked {
    funcProfileWrite() //todo: data ISNT saving at this point. Move it to Stat destructor 
    funcSendProfile()
    instance_destroy(Stat, true)
    instance_destroy(Net, true)
    instance_destroy(self, true)
    room_goto(rMenu)
    exit
    }
  }
if bVoteY &gt; 0 {
  if bVoteY.clicked {
    instance_destroy(bVoteY)
    instance_destroy(bVoteN)
    bVoteY = -1
    bVoteN = -1
    VoteChoice = true
    VoteY++
    Voted = true
    with Net {event_user(6)}
    exit
    }
  if bVoteN.clicked {
    instance_destroy(bVoteY)
    instance_destroy(bVoteN)
    bVoteY = -1
    bVoteN = -1
    VoteChoice = false
    VoteN++
    Voted = true
    with Net {event_user(6)}
    exit
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enter pressed event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Stat.attempts++

//check len
if string_length(currWord) &lt; MinLen {
  Cube.LengthErr = true
  Stat.lens++
  exit
  }
  
//check tabu
for (i=2; i&lt;=string_length(currWord); i++) {
  j = ds_list_find_index(l.TabuList, string_char_at(currWord,i))
  if (j != -1) &amp;&amp; (j != TTNum) {
    Cube.TabuErr = true
    Cube.TabuErrNum = j
    Stat.tabus++
    exit
    } 
  }

//check prevword
if wordlistTyped(wl,currWord, true) {
  Stat.prevs++
  exit
  }                                                      
    
//check dict
var tmpm, tmpl, tmp;
  //first lv find
  tmpm = ds_map_find_value(global.DictDS,string_char_at(currWord,1))
  if tmpm != -1
    {
    tmpl = ds_map_find_value(tmpm,string_char_at(currWord,2))
    if tmpl != -1
      {
      tmp = ds_list_find_index(tmpl,currWord)
      if tmp != -1 {
        //trigger netevent
        waiting = true
        with Net event_user(2)
        }
      else {
        Cube.LengthErr = true
        Stat.dicts++
        }
      }
    else {
      Cube.LengthErr = true
      Stat.dicts++
      }
    }
  else {
    Cube.LengthErr = true
    Stat.dicts++
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Game Start event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>prepared = true
currWord = string_char_at(prevWord,string_length(prevWord))
if wl.Words == 0
  Cube.Rot = true
Timer.active = true
Timer.LastTime = current_time
//if !reconnect check todo
global.profile[?'PSGAMES']++
global.profile[?'PSSERVERS']++
exit
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TabuHilight
if TT {
  var xt = Cube.x;
  if Shift xt+= 72
  draw_set_alpha(0.2)
  draw_set_color(c_white)
  j = MinLen*32
  draw_rectangle(xt-j+TTNum*72,Cube.y-j-100,xt-j+TTNum*72+66,Cube.y-j-34,false)
  }
//todo: fix drawing + refactor

if paused {
  drawTextPreset(fImpact96, c_white, 1, fa_left, fa_top)
  //background + border
  draw_sprite_ext(sPixel,0,50,50,1100,1100,0,0,0.75)
  for (var i=0; i&lt;4; i++)
    draw_rectangle(50+i,50+i, 1150-i, 1150-i, true)
  //caption
  draw_text(100,60, 'CUSTOM GAME')
  //hint
  draw_set_font(fCube)
  draw_text(65, 180, 'Press Esc to continue game')
  //stat
  draw_text(65, 260, 'GAME STAT#Playtime: ' + formatTimeString(Stat.ticks) + 
    '#Words: ' + string(Stat.words) + 
    '#Letters accepted: ' + string(Stat.lettersa) + 
    '#Letters typed: ' + string(Stat.letters) + 
    '#Greenletters: ' + string(Stat.targetsa))
  }

//todo: pre-timer!

if waiting
  drawLoading(loadRot)

if Vote
  {
  draw_set_valign(fa_top)
  draw_set_halign(fa_center)
  draw_set_font(fCube)
  draw_set_alpha(0.5)
  draw_set_color(c_dkgray)
  if !Voted
    {   
    draw_rectangle(150,680,1450,1180,false)
    draw_set_alpha(1)
    draw_rectangle(150,680,1450,1180,true)
    draw_set_color(c_white)
    draw_text(800,700,VoteText)
    }
  else
    {
    draw_rectangle(150,880,1450,1180,false)
    draw_set_alpha(1)
    draw_rectangle(150,880,1450,1180,true)
    draw_set_color(c_white)
    draw_text(800,900,'Vote result')
    draw_line_width(300,1050,1300,1050,32)
    if VoteChoice
      {
      draw_set_color(c_blue)
      draw_line_width(300,1050,300+(VoteY/(Net.Players))*1000,1050,28)
      draw_set_color(c_red)
      draw_line_width(1300,1050,1300-(VoteN/(Net.Players))*1000,1050,28)
      }
    else
      {
      draw_set_color(c_red)
      draw_line_width(300,1050,300+(VoteY/(Net.Players))*1000,1050,28)
      draw_set_color(c_blue)
      draw_line_width(1300,1050,1300-(VoteN/(Net.Players))*1000,1050,28)
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alpha background
draw_sprite_ext(sPixel,0,0,0,1600,1200,0,0,0.5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameAnykeyMulti(5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
