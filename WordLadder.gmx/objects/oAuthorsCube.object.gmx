<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>MinLen = 9
w1 = '         '
w2 = '         '
w3 = '         '
w4 = '         '

Rot = false                 //Otherclockwise animation
RotDeg = 0
NewWord = true              //new word approach animation
NewWordX = 0

aps = 0.05                     //alpha per square
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Rot
  {
  RotDeg+=3
  if RotDeg&gt;=90
    {
    RotDeg = 0
    w4 = w3
    w3 = w2
    w2 = w1
    w1 = string_char_at(w1,string_length(w1))
    NewWord = true
    NewWordX = 0
    Rot = false
    }
  aps = 1 / (string_length(w2)-1 + string_length(w3)-1 + string_length(w4)*((90-RotDeg)/90) -2)
  }
if NewWord
  {
  if NewWordX &lt; 576     //64 * 9 const MinLen
    NewWordX+= 16
  else
    NewWord = false
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fCube)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_center)
draw_set_alpha(1)

//fader
draw_sprite_ext(sFadedCircle,0,x,y,MinLen*2.5,MinLen*2.5,0,0,1)

//w1
j = MinLen*32 - 32
tmp = 9 // MinLen
for (i=0; i&lt;tmp; i++)
  {
  xd = x-j+64*i
  yd = y-j
  if Rot
    {
    dist=point_distance(x,y,xd,yd)
    currrot=degtorad(point_direction(x,y,xd,yd)+RotDeg)  
    xd=x+dist*cos(currrot)
    yd=y-dist*sin(currrot)
    }
  draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,1)       
  draw_text_transformed(xd,yd,string_char_at(w1,i+1), 1,1,RotDeg)
  }  
  
for (i=1; i&lt;string_length(w2); i++)
  {
  xd = x-j
  yd = y-j+64*i
  if Rot
    {
    dist=point_distance(x,y,xd,yd)
    currrot=degtorad(point_direction(x,y,xd,yd)+RotDeg)  
    xd=x+dist*cos(currrot)
    yd=y-dist*sin(currrot)
    }
  draw_set_alpha(draw_get_alpha()-aps)
  draw_sprite_ext(sSquareCenter,0,xd,yd,1,1,RotDeg,c_white,draw_get_alpha()) 
  draw_text_transformed(xd,yd,string_char_at(w2,string_length(w2)-i), 1,1,RotDeg+90)
  }
  
//w3
for (i=1; i&lt;string_length(w3); i++)
  {
  xd = x-j+64*i
  yd = y-j+(string_length(w2)-1)*64
  if Rot
    {
    dist=point_distance(x,y,xd,yd)
    currrot=degtorad(point_direction(x,y,xd,yd)+RotDeg)  
    xd=x+dist*cos(currrot)
    yd=y-dist*sin(currrot)
    }
  draw_set_alpha(draw_get_alpha()-aps)
  draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,draw_get_alpha()) 
  draw_text_transformed(xd, yd,string_char_at(w3,string_length(w3)-i), 1,1,RotDeg+180)
  }

//w4    
i=1
while (draw_get_alpha() &gt; 0)
  {
  xd = x-j+(string_length(w3)-1)*64
  yd = y-j+(string_length(w2)-1)*64-i*64
  if Rot
    {
    dist=point_distance(x,y,xd,yd)
    currrot=degtorad(point_direction(x,y,xd,yd)+RotDeg)  
    xd=x+dist*cos(currrot)
    yd=y-dist*sin(currrot)
    }
  draw_set_alpha(draw_get_alpha()-aps)
  draw_sprite_ext(sSquareCenter,0, xd, yd, 1,1,RotDeg,c_white,draw_get_alpha()) 
  draw_text_transformed(xd, yd, string_char_at(w4,string_length(w4)-i), 1,1,RotDeg+270)
  i++
  } 

//Fading
if !Rot &amp;&amp; NewWord
  {
  draw_sprite_ext(sSquareFaded,0,x-j+NewWordX-32,y-j-32,0.25,0.25,RotDeg,c_black,1) 
  draw_sprite_ext(sPixel,0,x-j+NewWordX+32,y-j-32,tmp*64-NewWordX,64,0,c_black,1)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
