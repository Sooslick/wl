<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Selected = 0
ShiftY = 0
Page = 0
Left = false
Right = false

sCaption[0] = 'GENERAL'
s[0] = 'ingame: '+formatTimeString(global.profile[?'PSINGAMETIME'])
s[0]+= '#play: '+formatTimeString(global.profile[?'PSPLAYTIME'])
s[0]+= '#online: '+formatTimeString(global.profile[?'PSONLINETIME'])
s[0]+= '#games launched: '+string(global.profile[?'PSGAMES'])
s[0]+= '#games ended: '+string(global.profile[?'PSENDS'])
s[0]+= '#servers: '+string(global.profile[?'PSSERVERS'])
s[0]+= '#RESETS: '+string(global.profile[?'PSRESETS'])
sDet1[0] = 'Select gamemode first.'
sDet2[0] = 'Select gamemode first.'
 
for (var i=1; i&lt;=10; i++)
  {
  var SECTMAP = global.profile[?'PSSECTIONS'];
  var gm;
  switch i
    {
    case 1: gm = 0;  sCaption[i] = 'OVERALL';       break
    case 2: gm = 10; sCaption[i] = 'SIMPLE';        break
    case 3: gm = 11; sCaption[i] = 'LAST SIMPLE';   break
    case 4: gm = 20; sCaption[i] = 'ADVANCED';      break
    case 5: gm = 21; sCaption[i] = 'LAST ADVANCED'; break
    case 6: gm = 30; sCaption[i] = 'ENDLESS';       break
    case 7: gm = 31; sCaption[i] = 'LAST ENDLESS';  break
    case 8: gm = 40; sCaption[i] = 'CUSTOM';        break
    case 9: gm = 41; sCaption[i] = 'LAST CUSTOM';   break
    case 10: gm = 100; sCaption[i] = 'MULTIPLAYER'; break
    }
  if !is_undefined(SECTMAP[?gm])
    {
    SECTMAP = SECTMAP[?gm]
    s[i] = 'words: '+string(SECTMAP[?'PSWORDS'])
    s[i]+= '#inputs: '+string(SECTMAP[?'PSINPUTS'])
    s[i]+= '#letters typed: '+string(SECTMAP[?'PSLETTERS'])
    s[i]+= '#letters accepted: '+string(SECTMAP[?'PSLETTERSA'])
    s[i]+= '#letters backspaced: '+string(SECTMAP[?'PSLETTERSB'])
    s[i]+= '#hints shown: '+string(SECTMAP[?'PSHINTS'])
    s[i]+= '#shifts acquired: '+string(SECTMAP[?'PSSHIFTSA'])
    s[i]+= '#shifts used: '+string(SECTMAP[?'PSSHIFTSU'])
    s[i]+= '#banned letters: '+string(SECTMAP[?'PSBANNED'])
    s[i]+= '#unbans acquired: '+string(SECTMAP[?'PSUNBANSA'])
    s[i]+= '#unbans used: '+string(SECTMAP[?'PSUNBANSU'])
    s[i]+= '#banned typed: '+string(SECTMAP[?'PSBANTYPED'])
    s[i]+= '#too shorts: '+string(SECTMAP[?'PSSHORTTYPED'])
    s[i]+= '#wrong words: '+string(SECTMAP[?'PSWRONGTYPED'])
    s[i]+= '#repeated words: '+string(SECTMAP[?'PSREPTYPED'])
    
    sDet1[i] = "WORD'S LENGTH:##"
    var lines = 2
    var map = SECTMAP[?'PSLENGTHMAP'];
    var src = ds_map_find_first(map);      //src = key
    var dest;                              //dest = map
    var qty;
    while (!is_undefined(src))
      {
      qty = 0;
      dest = map[?src]
      for(j=0; j&lt;26; j++)
        qty+= dest[?funcChrDecode(j)]
      sDet1[i]+= string(src) + ': ' + string(qty) + '#'
      lines++
      src = ds_map_find_next(map,src)
      }
  //    if lines &gt; 6
  //      sc = (6+lines/10) / lines
  //    else
  //      sc = 1
  
    sDet2[i] = "WORD THAT START WITH##"
    for(j=0; j&lt;26; j++)
      {
      var src = ds_map_find_first(map);
      var dest;
      var qty = 0;
      while (!is_undefined(src))
        {
        dest = map[?src]
        qty+= dest[?funcChrDecode(j)]
        src = ds_map_find_next(map,src)
        }
      if qty != 0
        sDet2[i]+= chr(funcChrDecode(j)) + ': ' + string(qty) + '#'
      }
  //    sc = 0.65
    }
  else
    {
    s[i] = 'Stat unavailable'
    sDet1[i] = 'Stat unavailable'
    sDet2[i] = 'Stat unavailable'
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if funcCheckGuiHover(560,0,960,1200)
    Left = true
else if funcCheckGuiHover(1060,0,1500,1200)
    Right = true
else
    {
    Left = false
    Right = false
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Left
  {
  Page--
  if Page &lt; 0
    Page = 2
  }
else if Right
  {
  Page++
  if Page &gt; 2
    Page = 0
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW PRE-SETS
draw_set_font(fImpact64)
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_set_valign(fa_top)
//MAIN DRAW   
draw_set_alpha(1)
draw_text(800,180,sCaption[Selected])

draw_set_halign(fa_left)
if Page == 0
  draw_text_transformed(640,280,s[Selected],0.5,0.5,0)
else if Page == 1
  draw_text_transformed(640,280,sDet1[Selected],0.5,0.5,0)
else
  draw_text_transformed(640,280,sDet2[Selected],0.5,0.5,0)
  
  //strelochka
for (var i=0; i&lt;=2; i++)
  {
  if i == Page
    draw_set_alpha(1)
  else
    draw_set_alpha(0.66)
  draw_circle(960+i*50,1000,15,false)
  }
var op = 0;
if Left
  op = 1
else
  op = 0.66
draw_sprite_ext(sArrowScroll,0,900,1000,1,1,180,c_white,op)
if Right
  op = 1
else
  op = 0.66
draw_sprite_ext(sArrowScroll,0,1120,1000,1,1,0,c_white,op)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
