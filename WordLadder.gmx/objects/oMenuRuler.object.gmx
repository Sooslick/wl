<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Tech variables
Header = 'WORD LADDER'
OnclickEvent = 0
lastClicked = -1
active = true               //all childs buttons are clickable when active
sec = -1                    //second menu ptr
stuff = -1                  //stuff obj ptr
bg = -1                     //square ruler ptr
layer = -1                  //layer obj ptr
layerObj = -1
posIn = global.G_RIGHT-400
posOut = global.G_RIGHT+120
//Buttons init
bNewGame = instance_create(posIn,280,oButtonIcon)
bNewGame.content = 'PLAY'
bNewGame.icon_xoff = -192
bNewGame.icon_img = 0
bNewGame.depth = depth
bNewGame.StartDepth = depth

bProfile = instance_create(posIn,440,oButtonIcon)
bProfile.content = 'PROFILE'
bProfile.icon_xoff = -186
bProfile.icon_img = 1
bProfile.depth = depth
bProfile.StartDepth = depth

bOptions = instance_create(posIn,600,oButtonIcon)
bOptions.content = 'OPTIONS'
bOptions.icon_xoff = -188
bOptions.icon_yoff = -4
bOptions.icon_img = 2
bOptions.depth = depth
bOptions.StartDepth = depth
bOptions.parent = id

bAuthors = instance_create(posIn,760,oButtonIcon)
bAuthors.content = 'CREDITS'
bAuthors.icon_xoff = -188
bAuthors.icon_img = 3
bAuthors.depth = depth
bAuthors.StartDepth = depth
bAuthors.parent = id

bExit = instance_create(posIn,920,oButtonIcon)
bExit.content = 'EXIT'
bExit.icon_xoff = -188
bExit.icon_img = 4
bExit.depth = depth
bExit.StartDepth = depth
bExit.parent = id
//Buttons clickable + anim vars
alist = ds_list_create()
ds_list_add(alist, bNewGame, bProfile, bOptions, bAuthors)
Anim = false
AnimTick = 0     //used to funcTickOffset
isInside = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mem free</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(bNewGame,true)
instance_destroy(bProfile,true)
instance_destroy(bOptions,true)
instance_destroy(bAuthors,true)
instance_destroy(bExit,true)
ds_list_destroy(alist)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Anim {
  //move buttons and bbox
  AnimTick++
  var p = funcTickOffset(AnimTick, posIn, posOut, isInside);
  bNewGame.x = p; bNewGame.sx = p
  bProfile.x = p; bProfile.sx = p
  bOptions.x = p; bOptions.sx = p
  bAuthors.x = p; bAuthors.sx = p
  bExit   .x = p; bExit   .sx = p
  //some kind of shitcode: force cancel drawing icons while anim=true
  bNewGame.icon_active = false
  bProfile.icon_active = false
  bOptions.icon_active = false
  bAuthors.icon_active = false
  bExit.icon_active = false
  //anim end code
  if AnimTick &gt;= 10 {
    Anim = false
    AnimTick = 0
    isInside = funcBoolSwitch(isInside)
    bNewGame.icon_active = !isInside
    bProfile.icon_active = !isInside
    bOptions.icon_active = !isInside
    bAuthors.icon_active = !isInside
    bExit.icon_active = !isInside
    if active
      uiSetClickable(alist, true)
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//check buttons pressed
if bNewGame.clicked
  {
  if ActiveMenuOpened                       //if button menu is opened
    {
    if instance_exists(oNewGameRuler)       //same button: close menu
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oNewGameRuler)        //else switch menu 
      ActiveMenuPtr.parent = id
      Header = 'GAME PREFERENCES' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bNewGame
      ButtonImgChange.sp = sButtonMark
      }
    }
  else
    {                                       //menu closed: open &amp; deactivate b2
    bTick = 1
    ButtonImgChange = bNewGame
    ActiveMenuOpened = true
    ActiveMenuPtr = instance_create(0,0,oNewGameRuler)
    ActiveMenuPtr.parent = id
    Header = 'GAME PREFERENCES' 
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bNewGame.clicked = false
  }

//similar sections    
else if bProfile.clicked
  {
  if ActiveMenuOpened                 
    {
    if instance_exists(oProfileRuler)     
      {
      bTick = 1
      ButtonImgChange.sp = sButton
      ActiveMenuOpened = false
      Header = 'RENAME THIS GAME'
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = 0
      b2Hide.clickable = true
      b2Accept.clickable = true
      }
    else
      {
      instance_destroy(ActiveMenuPtr,true) 
      ActiveMenuPtr = instance_create(0,0,oProfileRuler)  
      ActiveMenuPtr.parent = id
      Header = 'PROFILE SETTINGS' 
      ButtonImgChange.sp = sButton
      ButtonImgChange = bProfile
      ButtonImgChange.sp = sButtonMark    
      }
    }
  else
    {                                    
    bTick = 1
    ButtonImgChange = bProfile
    ActiveMenuOpened = true
    Header = 'PROFILE SETTINGS' 
    ActiveMenuPtr = instance_create(0,0,oProfileRuler)
    ActiveMenuPtr.parent = id
    b2Hide.clickable = false
    b2Accept.clickable = false
    }
  bProfile.clicked = false  
  }
  
else if bOptions.clicked
  {
  if layerObj == -1
    {
    Header = 'SETTINGS'
    bOptions.sp = sButtonMark
    Anim = true
    uiSetClickable(alist, false)
    stuff.active = false
    with sec {uiSetClickable(alist,false)}
    layerObj = instance_create(0,0,oOptionsRuler)
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerObj.parent = id
    }
  else if layerObj.object_index == oOptionsRuler
    {
    Header = 'WORD LADDER'
    bOptions.sp = sButton
    Anim = true                     //main menu: move back
    uiSetClickable(alist, false)
    stuff.active = true             //splash: visible
    with sec {uiSetClickable(alist,true)}
    layer.Anim = true               //layer: destroy
    layer.AnimType = 1
    layer.depth++
    layerObj = -1
    }
  else
    {
    Header = 'SETTINGS'
    lastClicked.sp = sButton
    bOptions.sp = sButtonMark
    layer.Anim = true               //layer: destroy old
    layer.AnimType = 1
    layer.depth++
    layerObj = instance_create(0,0,oOptionsRuler) //layer: create new
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerObj.parent = id
    }
  lastClicked = bOptions
  }
//todo: comment ALL buttons!
else if bAuthors.clicked
  {
  if layerObj == -1
    {
    Header = 'CREDITS'
    bAuthors.sp = sButtonMark
    Anim = true
    uiSetClickable(alist, false)
    stuff.active = false
    with sec {uiSetClickable(alist,false)}
    layerObj = instance_create(0,0,oAuthorsRuler)
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerObj.parent = id
    }
  else if layerObj.object_index == oAuthorsRuler
    {
    Header = 'WORD LADDER'
    bAuthors.sp = sButton
    Anim = true                     //main menu: move back
    uiSetClickable(alist, false)
    stuff.active = true             //splash: visible
    with sec {uiSetClickable(alist,true)}
    layer.Anim = true               //layer: destroy
    layer.AnimType = 1
    layer.depth++
    layerObj = -1
    }
  else
    {
    Header = 'CREDITS'
    lastClicked.sp = sButton
    bAuthors.sp = sButtonMark
    layer.Anim = true               //layer: destroy old
    layer.AnimType = 1
    layer.depth++
    layerObj = instance_create(0,0,oAuthorsRuler) //layer: create new
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerObj.parent = id
    }
  lastClicked = bAuthors
  }
  
//SAVE DATA &amp; QUIT  
else if bExit.clicked
  {
  funcCfgWrite()
  funcProfileWrite()
  action_end_game()
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Caption
drawTextPreset(fImpact96, c_white, 1, fa_center, fa_center)
draw_text(800,100,Header)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="90">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>open dev menu</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(vk_control) &amp;&amp; keyboard_check(vk_shift)
  room_goto(rDev)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
