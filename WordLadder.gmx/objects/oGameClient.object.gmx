<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_set_config(network_config_use_non_blocking_socket, 1);
client = network_create_socket(network_socket_tcp);
network_connect(client, global.IP, 27015);
buffer_send = buffer_create(64, buffer_grow, 1);

PID = -1
GR = -1
timeout = 300
connected = false

Players = 0
Ready = 0

PlsArrPing[0] = 0               
PlsArrName[0] = ''
PlsArrID[0] = 0
PlsArrWord[0] = ''
PlsArrScore[0] = 0
PlsArrShift[0] = false
PlsArrUnban[0] = -1
PlsArrPos[0] = 0

RestartTimer = 150
Restarting = false

ChatActive = false
Chat = instance_create(800,200,oGameChat)
Chat.parent = id
Chat.visible = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(client)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timeout--
if timeout &lt;= 0
  if !connected || parent.loaded
    {
    network_destroy(client)
    action_another_room(rMenu)
    //todo msg
    }
    
if Restarting
  {
  RestartTimer--
  if RestartTimer &lt;= 0
    action_another_room(rGame)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>eid = ds_map_find_value(async_load, "id");
type = ds_map_find_value(async_load, "type");
sock = ds_map_find_value(async_load, "socket");
ip = ds_map_find_value(async_load, "ip");
msg_buff = ds_map_find_value(async_load, "buffer");
timeout = 300

if type = network_type_non_blocking_connect
  {
  buffer_seek(buffer_send, buffer_seek_start, 0);
  buffer_write(buffer_send, buffer_s8, 0)
  buffer_write(buffer_send, buffer_s32, global.GameVersion)
  buffer_write(buffer_send, buffer_s32, global.profile[?'PNETID'])
  buffer_write(buffer_send, buffer_string, global.profile[?'PNAME'])
  network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
  connected = true
  parent.tc.online = true
  }
  
else if type == network_type_data
  {    
  var header = buffer_read(msg_buff, buffer_s8)
  switch header
    {
    //recv init info: GameMode + locale
    case 1:
      global.GameType = buffer_read(msg_buff, buffer_s8)
      parent.dict.locale = buffer_read(msg_buff, buffer_s8)
      PID = buffer_read(msg_buff, buffer_s8)
      with parent {event_user(2)}
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 5)           //plr info request
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping socket
    case 2:
      var pong = buffer_read(msg_buff, buffer_s32)
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 3)
      buffer_write(buffer_send, buffer_s32, pong)
      buffer_write(buffer_send, buffer_s32, current_time)
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv ping broadcast
    case 4:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        PlsArrPing[i] = buffer_read(msg_buff, buffer_s32);
      break
      
    //Player Infos  
    case 6:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        {
        PlsArrID[i] = buffer_read(msg_buff, buffer_s32);
        PlsArrName[i] = buffer_read(msg_buff, buffer_string);
        PlsArrWord[i] = ''
        PlsArrScore[i] = 0
        PlsArrShift[i] = false
        PlsArrUnban[i] = -1
        PlsArrPos[i] = i
        }
      buffer_seek(buffer_send, buffer_seek_start, 0);
      buffer_write(buffer_send, buffer_s8, 8)           //rules map request
      network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
      break
      
    //recv game rules set
    case 7:
      global.custom = json_decode(buffer_read(msg_buff, buffer_string))
      with parent.dict {event_user(0)}
      break
      
    //recv Ready qty
    case 10:
      Ready = buffer_read(msg_buff, buffer_s8);
      if GR != -1
        {
        GR.prestart = true
        GR.currWord = buffer_read(msg_buff, buffer_string);
        GR.Cube.w1 = GR.currWord
        }
      break
      
    //sync prestart timer
    case 11:
      if GR != -1
        GR.BTimer = buffer_read(msg_buff, buffer_s32);
      break
      
    //sync game timer or game start signal
    case 12:
      if GR != -1
        {
        if !GR.prepared &amp;&amp; GR.BStart &lt; 0
          {
          GR.prepared = true
          GR.currWord = string_char_at(GR.currWord,string_length(GR.currWord))
          GR.Cube.Rot = true
          }
        GR.Timer = buffer_read(msg_buff, buffer_s32);
        }
      break
      
    //word checked by server
    case 14:
      if GR != -1
          {
          var pid = buffer_read(msg_buff, buffer_s8);     //player typed the word
          if pid == PID
            {
            GR.waiting = false 
            GR.myWord = true
            } 
          var success = buffer_read(msg_buff, buffer_bool);
          var sh = buffer_read(msg_buff, buffer_bool);
          var bb = buffer_read(msg_buff, buffer_bool);
          PlsArrWord[pid] = buffer_read(msg_buff, buffer_string)
          if success
            {
            if sh
              {
              GR.ShiftQty--
              GR.ShiftU = true
              }
            if bb
              {
              GR.TTQty--
              GR.TTU = true
              }
            GR.currWord = PlsArrWord[pid]
            GR.Cube.w1 = GR.currWord
            with GR {event_user(1)}
            GR.waiting = true
            for (var i=0; i&lt;Players; i++)
              PlsArrWord[i] = ''
            }
          }
      break
      
    //refresh Ban &amp; Green Lists
    case 15:
      if GR != -1
          {
          GR.ShiftQty = buffer_read(msg_buff, buffer_s8);
          GR.TTQty = buffer_read(msg_buff, buffer_s8);
          GR.MinLen = buffer_read(msg_buff, buffer_s8);
          GR.Cube.NewLen = GR.MinLen
          var B = buffer_read(msg_buff, buffer_s8);
          var G = buffer_read(msg_buff, buffer_s8);
          var S = buffer_read(msg_buff, buffer_string);
          ds_list_clear(GR.TabuList)
          for (var i=1; i&lt;=B; i++)
            ds_list_add(GR.TabuList,string_char_at(S,i))
          ds_list_clear(GR.TargetList)
          for (var i=B+1; i&lt;=B+G; i++)
            ds_list_add(GR.TargetList,string_char_at(S,i))
          GR.waiting = false
          }
      break
      
    //refresh scoretable
    case 16:
      Players = buffer_read(msg_buff, buffer_s8);
      for (var i=0; i&lt;Players; i++)
        {
        PlsArrPos[i] = buffer_read(msg_buff, buffer_s8);
        PlsArrScore[i] = buffer_read(msg_buff, buffer_s32);
        }
      break
      
    //disconnected
    case 17:
      network_destroy(client)
      action_another_room(rMenu)
      //todo msg
      break
      
    //someone disconnected
    case 18:
      var pid = buffer_read(msg_buff, buffer_s8);
        //Shift Table Pos
      for (var i=0; i&lt;Players; i++)
        if PlsArrPos[i] &gt; PlsArrPos[pid]
          PlsArrPos[i]-- 
          //shift array
      for (var i = pid; i &lt; Players-1; i++)
        {
        PlsArrPing[i] = PlsArrPing[i+1]
        PlsArrName[i] = PlsArrName[i+1]
        PlsArrID[i] = PlsArrID[i+1]
        PlsArrWord[i] = PlsArrWord[i+1]
        PlsArrScore[i] = PlsArrScore[i+1]
        PlsArrShift[i] = PlsArrShift[i+1]
        PlsArrUnban[i] = PlsArrUnban[i+1]
        PlsArrPos[i] = PlsArrPos[i+1]
        }
      Players--
      break
      
    //restart signal
    case 19:
      RestartTimer = 150
      Restarting = true
      network_destroy(client)
      break
      
    //chat event
    case 20:
      Chat.GotStr = buffer_read(msg_buff, buffer_string);
      with Chat {event_user(0)}
      break
    
    //Vote init event
    case 21:
      buffer_read(msg_buff, buffer_s8);
      var VoteStarter = buffer_read(msg_buff, buffer_s8);
      GR.VoteText = buffer_read(msg_buff, buffer_string);
      with GR {event_user(3)}
      //TODO Force Yes if PID == VoteStarter
      break
    
    //Vote Progress event
    case 23:
      Players = buffer_read(msg_buff, buffer_s8);
      GR.VoteY = buffer_read(msg_buff, buffer_s8);
      GR.VoteN = buffer_read(msg_buff, buffer_s8);
      var isResult = buffer_read(msg_buff, buffer_bool);
      if isResult
        {
        Vote = false
        GR.Vote = false
        }
      break
      
    //full word history recv
    case 24:
      var tmp = buffer_read(msg_buff, buffer_s32);
      for (var i=0; i&lt;tmp; i++)
        ds_list_add(GR.prevWordList,buffer_read(msg_buff, buffer_string));
      break
      
    //current game state recv
    case 25:
      GR.MinLen = buffer_read(msg_buff, buffer_s8);
      GR.Cube.MinLen = GR.MinLen
      GR.words = buffer_read(msg_buff, buffer_s32);
      GR.Cube.w1 = buffer_read(msg_buff, buffer_string);
      GR.Cube.w2 = buffer_read(msg_buff, buffer_string);
      GR.Cube.w3 = buffer_read(msg_buff, buffer_string);
      GR.currWord = string_char_at(GR.Cube.w1,string_length(GR.Cube.w1))
      break
    }                
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vote </string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 22)
buffer_write(buffer_send, buffer_bool, GR.VoteChoice)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>send chat</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 20)
buffer_write(buffer_send, buffer_string, Chat.PendingStr)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gameover event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stat passed from GameRuler in endgame event
var bestpl = -1;
var bestsc = -1;
for (var i=0; i&lt;Players; i++)
  if PlsArrScore[i] &gt; bestsc
    {
    bestpl = i
    bestsc = PlsArrScore[i]
    }
var s = 'BEST PLAYER:#';
s+= PlsArrName[bestpl]
s+= '##SCORE:#'
s+= string(PlsArrScore[bestpl])
Stat.s = s
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Enter pressed</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 13)
buffer_write(buffer_send, buffer_s8, GR.TTNum)
buffer_write(buffer_send, buffer_bool, GR.Shift)
buffer_write(buffer_send, buffer_bool, true)
buffer_write(buffer_send, buffer_string, GR.currWord)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Input event</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 13)
buffer_write(buffer_send, buffer_s8, GR.TTNum)
buffer_write(buffer_send, buffer_bool, GR.Shift)
buffer_write(buffer_send, buffer_bool, false)
buffer_write(buffer_send, buffer_string, GR.currWord)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>"Ready" clicked</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Chat.visible = true
buffer_seek(buffer_send, buffer_seek_start, 0);
buffer_write(buffer_send, buffer_s8, 9)
network_send_packet( client, buffer_send, buffer_tell(buffer_send) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit

draw_set_font(fImpact64)
draw_set_color(c_white)
draw_set_halign(fa_right)
draw_set_valign(fa_top)

for (var i=0; i&lt;Players; i++)
  {
  var j = PlsArrPos[i];
  var p = PlsArrPos[PID]-j;
  if abs(p) &lt; 6
    {
    draw_set_alpha(1 - abs(p)/5)
    //name column
    var w = string_width(PlsArrName[i]);
    if w &lt; 350
      draw_text(1595,575-p*70,PlsArrName[i])
    else
      draw_text_transformed(1595,575-p*70,PlsArrName[i],350/w,1,0)
    //score column
    draw_text(1240,575-p*70,string(PlsArrScore[i]))
    //draw_text(1240,575-p*70,string(PlsArrPos[i]))
    //word column
    if p != 0
      draw_text(1080,575-p*70,PlsArrWord[i])
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !parent.loaded
  exit

draw_set_font(fImpact64)
draw_set_color(c_white)
draw_set_alpha(1)
draw_set_halign(fa_right)
draw_set_valign(fa_top)

draw_text(1595,65,'Players: ' + string(Players))

//ping column
//for (var i=0; i&lt;Players; i++)
//  draw_text(1595,500-i*65,string(PlsArrPing[i]))

//prestart string
if GR != -1
  if !GR.prepared
    {
    var s = 'Waiting for players#Ready: ' + string(Ready) + ' / ' + string(Players);
    draw_set_halign(fa_center)
    draw_set_valign(fa_center)
    draw_text(800, 400, s)
    }

if Restarting
  {
  draw_set_halign(fa_center)
  draw_set_valign(fa_center)
  draw_set_font(fImpact96)
  var s = 'Restarting in#';
  s+= formatTimeString(RestartTimer)
  draw_text(800, 600, s)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
