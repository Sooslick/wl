<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//tech variables
Page = 0                //stat page: 0 overall, 1 lengths, 2 letters
Left = false            //prev page hover
Right = false           //nxt page hover
DrawStr[0] = 'Select gamemode first.'
DrawStr[1] = ''
DrawStr[2] = ''
Lines = 1
Sc = 1
Header = ''
gm = -1                 //Selected gamemode
MarkedButton = -1
OnclickEvent = 0

//anim

//buttons
bCb = instance_create(224,80,oCheckBox)
bCb.content = 'Last game only'
bCb.font = fImpact64
bCb.dsc = 0.75
bCb.tsc = 0.7
with bCb {uiRescale(375)}

b0 = instance_create(140,180,oButton)
b0.content = 'OVERALL'
b0.font = fImpact64
b0.dsc = 0.66
b0.tsc = 0.6
b0.image_angle = 180

b1 = instance_create(140,270,oButton)
b1.content = 'SIMPLE'
b1.font = fImpact64
b1.dsc = 0.66
b1.tsc = 0.6
b1.image_angle = 180

b2 = instance_create(140,360,oButton)
b2.content = 'ADVANCED'
b2.font = fImpact64
b2.dsc = 0.66
b2.tsc = 0.6
b2.image_angle = 180

b3 = instance_create(140,450,oButton)
b3.content = 'ENDLESS'
b3.font = fImpact64
b3.dsc = 0.66
b3.tsc = 0.6
b3.image_angle = 180

b4 = instance_create(140,540,oButton)
b4.content = 'CUSTOM'
b4.font = fImpact64
b4.dsc = 0.66
b4.tsc = 0.6
b4.image_angle = 180

b10 = instance_create(140,630,oButton)
b10.content = 'CO-OP'
b10.font = fImpact64
b10.dsc = 0.66
b10.tsc = 0.6
b10.image_angle = 180

bBack = instance_create(300,800, oButton)
bBack.content = 'BACK'

bAch = instance_create(1200,800, oButton)
bAch.content = 'ACHIEVEMENTS'
with bAch {uiRescale(505)}

//clickables list
alist = ds_list_create()
ds_list_add(alist, bCb,b0,b1,b2,b3,b4,b10,bBack,bAch)

for (var i=0; i&lt;ds_list_size(alist); i++) {
  alist[|i].parent = id
  alist[|i].useParentSurface = true
  alist[|i].sx = alist[|i].x + 50
  alist[|i].sy = alist[|i].y + 180
  }

ds = surface_create(1500,900)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(bCb, true)
instance_destroy(b0, true)
instance_destroy(b1, true)
instance_destroy(b2, true)
instance_destroy(b3, true)
instance_destroy(b4, true)
instance_destroy(b10, true)
instance_destroy(bBack, true)
instance_destroy(bAch, true)
ds_list_destroy(alist)
if surface_exists(ds)
  surface_free(ds)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if funcCheckGuiHover(610,950,750,1080) {
    Left = true
    Right = false
    }
else if funcCheckGuiHover(850,950,990,1080) {
    Right = true
    Left = false
    }
else {
    Left = false
    Right = false
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Left
  {
  Page--
  if Page &lt; 0
    Page = 2
  event_user(1)
  }
else if Right
  {
  Page++
  if Page &gt; 2
    Page = 0
  event_user(1)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>recalc drawstr (switch gm)</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var SECTMAP = global.profile[?'PSSECTIONS'];
switch gm
  {
  case 0:   Header = 'OVERALL';       break
  case 10:  Header = 'SIMPLE';        break
  case 11:  Header = 'LAST SIMPLE';   break
  case 20:  Header = 'ADVANCED';      break
  case 21:  Header = 'LAST ADVANCED'; break
  case 30:  Header = 'ENDLESS';       break
  case 31:  Header = 'LAST ENDLESS';  break
  case 40:  Header = 'CUSTOM';        break
  case 41:  Header = 'LAST CUSTOM';   break
  case 100: Header = 'CO-OP';         break
  case 101: Header = 'LAST CO-OP';    break
  }
if !is_undefined(SECTMAP[?gm])
  {
  SECTMAP = SECTMAP[?gm]
  switch Page {
    case 0:
      DrawStr[0] = 'words: '+string(SECTMAP[?'PSWORDS']) +
      '#inputs: '+string(SECTMAP[?'PSINPUTS']) +
      '#letters typed: '+string(SECTMAP[?'PSLETTERS']) +
      '#letters accepted: '+string(SECTMAP[?'PSLETTERSA']) +
      '#letters backspaced: '+string(SECTMAP[?'PSLETTERSB']) +
      '#hints shown: '+string(SECTMAP[?'PSHINTS']) +
      '#shifts acquired: '+string(SECTMAP[?'PSSHIFTSA']) +
      '#shifts used: '+string(SECTMAP[?'PSSHIFTSU']) +
      '#banned letters: '+string(SECTMAP[?'PSBANNED']) +
      '#unbans acquired: '+string(SECTMAP[?'PSUNBANSA']) +
      '#unbans used: '+string(SECTMAP[?'PSUNBANSU']) +
      '#banned typed: '+string(SECTMAP[?'PSBANTYPED']) +
      '#too shorts: '+string(SECTMAP[?'PSSHORTTYPED']) +
      '#wrong words: '+string(SECTMAP[?'PSWRONGTYPED']) +
      '#repeated words: '+string(SECTMAP[?'PSREPTYPED']) +
      '#best score: '+string(SECTMAP[?'PSBESTSCORE']) +
      '#last score: '+string(SECTMAP[?'PSLASTSCORE'])
      DrawStr[1] = ''
      DrawStr[2] = ''
      Lines = 17
      break
    case 1:
      DrawStr[0] = "WORD'S LENGTH:#"
      DrawStr[1] = '#'
      DrawStr[2] = '#'
      Lines = 1
      var map = SECTMAP[?'PSLENGTHMAP'];
      var src = ds_map_find_first(map);      //src = key, word's length
      var dest;                              //dest = map w/ word's starts
      var qty;
      var strs = 0;
      var percol = 0;
      var lst = ds_list_create()
      //lengts assign &amp; sort
      while (!is_undefined(src)) {
        ds_list_add(lst, src)
        src = ds_map_find_next(map,src)
        strs++
        }
      ds_list_sort(lst, true)
      //per column lines calc
      if strs &gt; 10
        percol = ceil(strs/3)
      else if strs &gt; 5
        percol = ceil(strs/2)
      else
        percol = strs
      //form strings
      for (var i=0; i&lt;ds_list_size(lst); i++) {
        qty = 0;
        dest = map[?lst[|i]]
        for (var j=0; j&lt;26; j++)
          qty+= dest[?funcChrDecode(j)]
        DrawStr[i div percol]+= string(lst[|i]) + ': ' + string(qty) + '#'
        }
      Lines = percol+1
      break
    case 2:
      DrawStr[0] = "WORD THAT START WITH#"
      DrawStr[1] = '#'
      DrawStr[2] = '#'
      var map = SECTMAP[?'PSLENGTHMAP'];
      for(j=0; j&lt;26; j++)
        {
        var src = ds_map_find_first(map);
        var dest;
        var qty = 0;
        while (!is_undefined(src))
          {
          dest = map[?src]
          qty+= dest[?funcChrDecode(j)]
          src = ds_map_find_next(map,src)
          }
        if j &lt; 9
          DrawStr[0]+= chr(funcChrDecode(j)) + ': ' + string(qty) + '#'
        else if j &lt; 18
          DrawStr[1]+= chr(funcChrDecode(j)) + ': ' + string(qty) + '#'
        else
          DrawStr[2]+= chr(funcChrDecode(j)) + ': ' + string(qty) + '#'
        }
      Lines = 10
      break
    }
  }
else
  {
  DrawStr[0] = 'Stat unavailable.'
  DrawStr[1] = ''
  DrawStr[2] = ''
  Lines = 1
  }
if Lines &gt; 7
  Sc = 7 / Lines
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>OnclickEvent</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bCb.clicked {
  if (MarkedButton != -1) &amp;&amp; (MarkedButton != b0)
    if bCb.checked
      gm++
    else
      gm--
    event_user(1)
  }
else if b0.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b0
  b0.sp = sButtonMark
  gm = 0
  event_user(1)
  }
else if b1.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b1
  b1.sp = sButtonMark
  if bCb.checked
    gm = 11
  else
    gm = 10
  event_user(1)
  }
else if b2.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b2
  b2.sp = sButtonMark
  if bCb.checked
    gm = 21
  else
    gm = 20
  event_user(1)
  }
else if b3.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b3
  b3.sp = sButtonMark
  if bCb.checked
    gm = 31
  else
    gm = 30
  event_user(1)
  }
else if b4.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b4
  b4.sp = sButtonMark
  if bCb.checked
    gm = 41
  else
    gm = 40
  event_user(1)
  }
else if b10.clicked {
  MarkedButton.sp = sButton
  MarkedButton = b10
  b10.sp = sButtonMark
  if bCb.checked
    gm = 101
  else
    gm = 100
  event_user(1)
  }
else if bBack.clicked {
  with parent.bProfile {uiOnclick()}
  uiSetClickable(alist,false)
  }
else if bAch.clicked {
  with parent {
    Header = 'ACHIEVEMENTS'
    layer.Anim = true               //layer: destroy old
    layer.AnimType = 3
    layer.depth++
    layerObj = instance_create(0,0,oProfileAchvs) //layer: create new
    layer = instance_create(0,0,oMenuLayer)
    layer.bg = bg
    layer.Child = layerObj
    layer.depth = depth
    layerAnimType = 2
    layerObj.parent = id
    }
  uiSetClickable(alist,false)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !surface_exists(ds)
  ds = surface_create(1500,900)
surface_set_target(ds)
draw_clear_alpha(0,0)

drawTextPreset(fImpact96, c_white, 1, fa_center, fa_top)
//MAIN DRAW   
draw_text(900,10,Header)
draw_set_font(fCube)
draw_set_halign(fa_left)

if Lines &gt; 7 {
  draw_text_transformed(400, 150, DrawStr[0], Sc, Sc, 0)
  draw_text_transformed(750, 150, DrawStr[1], Sc, Sc, 0)
  draw_text_transformed(1100, 150, DrawStr[2], Sc, Sc, 0)
  }
else {
  draw_text(400, 150, DrawStr[0])
  draw_text(750, 150, DrawStr[1])
  draw_text(1100, 150, DrawStr[2])
  }
  //strelochka
for (var i=0; i&lt;=2; i++)
  {
  if i == Page
    draw_set_alpha(1)
  else
    draw_set_alpha(0.66)
  draw_circle(700+i*50,820,15,false)
  }
var op = 0;
if Left
  op = 1
else
  op = 0.66
draw_sprite_ext(sArrowScroll,0,640,820,1,1,180,c_white,op)
if Right
  op = 1
else
  op = 0.66
draw_sprite_ext(sArrowScroll,0,860,820,1,1,0,c_white,op)

surface_reset_target()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
