<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//0.0.1.7            1*7 + 256*1 + *0 + *0
global.GameVersion = 263
global.versionName = 'Demo 0.0.1.7: coop update'

randomize()
global.cfg = 'config.cfg'
global.SaveCorrupted = false
global.GameType = 0                 //gametypes: 1-4 solo; 11-12 mp
global.DictLoaded = -1              //loaded locale
global.DictDS = -1                  //data ds no
global.config = ds_map_create()
global.profile = ds_map_create()
funcCfgRead()
funcProfileRead()

//WINDOW SETTINGS:
if global.WIN_HEIGHT / global.WIN_WIDTH &gt;=0.75          //4:3 ratio
  {
  global.DRAW_SCALE = global.WIN_WIDTH / 1600           //black lines on top &amp; bottom
  global.DRAW_VOFF = (global.WIN_HEIGHT - 1200*global.DRAW_SCALE) / 2
  global.DRAW_HOFF = 0
  }
else 
  {
  global.DRAW_SCALE = global.WIN_HEIGHT / 1200          //black on left &amp; right
  global.DRAW_VOFF = 0
  global.DRAW_HOFF = (global.WIN_WIDTH - 1600*global.DRAW_SCALE) / 2 
  }
window_set_size(global.WIN_WIDTH,global.WIN_HEIGHT)
window_set_fullscreen(global.config[?'Fullscreen'])
//window_center()
//display_reset(0,true)
display_set_gui_size(1600,1200)

//LOGO Code:
frame=0
if global.config[?'ShowLogo']
      {
      stepno=0
      opacity=1.0
      }
//IF LOGO SKIPPED:      
else if global.config[?'FirstLaunch']
      action_another_room(rFirst)
else
      action_another_room(rMenu)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>frame++
switch (frame)
  {
  case 30: stepno=1; break;         //animation case
  case 120: stepno=3; break;        //0: begin
  }                                 //1: black
if stepno==3                        //2: white
  if global.config[?'FirstLaunch']  //3: end
      action_another_room(rFirst)
  else
      action_another_room(rMenu)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shader_set(shLinear)
  var shader_params = shader_get_uniform(shLinear, "tense");
  shader_set_uniform_f(shader_params, 1 - frame/987);
  draw_sprite(LogoWhite,0,800,600)
  shader_reset()
if stepno==0
  {
  draw_sprite_ext(sPixel,0,0,0,1600,1200,0,c_white,1)
  draw_sprite(LogoBlack,0,800,600)
  }
else if stepno==1
  {
  draw_sprite_ext(LogoWhite,0,800,600,1,1,2,c_red,0.5)
  draw_sprite_ext(LogoWhite,0,800,600,1,1,358,c_aqua,0.5)
  draw_sprite(LogoWhite,0,800,600)
  draw_sprite_ext(sPixel,0,0,0,1600,1200,0,c_white,opacity)
  opacity/=2
  if opacity&lt;0.01 stepno=2
  }
else if stepno==2
  {
  switch (frame)
    {
    case 65: draw_sprite_ext(LogoWhite,0,800,800,1.25,1.25,10,c_red,0.5); break;
    case 67: case 69: draw_sprite_ext(LogoWhite,0,800,600,1.5,1.5,10,c_red,0.5); break;
    case 75: case 76: draw_sprite_ext(LogoWhite,0,800,400,1.5,1.5,8,c_red,0.5); break;
    default: draw_sprite_ext(LogoWhite,0,800,600,1,1,2,c_red,0.5); break;
    }
  draw_sprite_ext(LogoWhite,0,800,600,1,1,358,c_aqua,0.5)
  draw_sprite(LogoWhite,0,800,600)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
