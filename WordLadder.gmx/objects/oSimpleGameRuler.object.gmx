<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//loaded = false
prepared = false
prevWord = ''
currWord = ''
prevWordList = ds_list_create()
prevOffset = -1
words = 0

prevAnim = false
prevAnimTick = 0

BStart = instance_create(800,1000, oButton)
BStart.content = 'BEGIN'

MinLen = 4  
for (i=1; i&lt;=MinLen; i++)
  {
  tmp = irandom_range(0,25) //todo CHECK LOCALE BLYA
  prevWord+= chr(funcChrDecode(tmp))
  }  
  
Timer = 300 * MinLen
Think = 0                   //one word clockwatch

TabuList = ds_list_create()
TabuQty = 1
TabuQtyProg = 0
TabuQtyMax = 10             //lv-ups: 10; 42; 42; 100; 666 -&gt; max.
TabuQtyAnim = false
TabuQtyAnimX = 0
TabuQtyAnimXTarget = 0

DecQty = 1
DecReq = 10                 //lv-ups: 10; 42; 42; 100; 100; 666 -&gt; max
DecProg = 0                 //prog: tabuqty + wordlen  - 10
DecAnim = false
DecAnimX = 0
DecAnimXTarget = 0

Shift = false               //using of ability flag
ShiftQty = 0
ShiftReq = 100              //linear increase
ShiftProg = 0               //prog: tabuqty + wordlen
ShiftAnim = false
ShiftAnimX = 0
ShiftAnimXTarget = 0

TT = false               //using of ability TabuType flag
TTNum = -1
TTQty = 0
TTReq = 1000              //linear increase
TTProg = 0               //prog: tabuqty + wordlen
TTAnim = false
TTAnimX = 0
TTAnimXTarget = 0

HintTimeUp = false
HintTooLong = false
HintWrong = 0           //0 = waiting;  1 = ready;  2 = passed
HintTimer = 0           //while &gt;0 a new oSquareHint cannot be created

//TabuFill
for (i=1; i&lt;=TabuQty; i++)
  {
  tmp = irandom_range(1,string_length(prevWord)-1)
  if tmp != string_char_at(prevWord,string_length(prevWord))
    ds_list_add(TabuList,string_char_at(prevWord,i))
  }

Cube = instance_create(800,600,oGameCube)
Cube.parent = id
Cube.MinLen = MinLen
Cube.w1 = prevWord
Cube.w2 = ''
Cube.w3 = ''
Cube.w4 = ''
Cube.TabuList = TabuList

Stat = instance_create(0,0,oGameStatCounter)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if prepared
  {
  Stat.ticks++
  Timer--
  Think++
  if HintTimer &gt; 0
    HintTimer--
  if Think==3333
    HintTooLong = true
  if Timer==666
    HintTimeUp = true
  if Timer==0
    {
    tmp = instance_create(0,0,oSquareTransition)
    tmp.parent = id
    TransitionEvent = 0
    prepared = false
    }
    
  if prevAnim
    {
    prevAnimTick++
    if prevAnimTick &gt;= 32
      {
      prevAnimTick = 0
      prevAnim = false
      }
    }
    
  if TabuQtyAnim
    {
    tmp = (TabuQtyAnimXTarget - TabuQtyAnimX) / 5
    TabuQtyAnimX+= tmp
    if abs(tmp) &lt;= 1
      TabuQtyAnim = false
    }
    
  if DecAnim
    {
    tmp = (DecAnimXTarget - DecAnimX) / 5
    DecAnimX+= tmp
    if abs(tmp) &lt;= 1
      DecAnim = false
    }
    
  if ShiftAnim
    {
    tmp = (ShiftAnimXTarget - ShiftAnimX) / 5
    ShiftAnimX+= tmp
    if abs(tmp) &lt;= 1
      ShiftAnim = false
    }
  
  if TTAnim
    {
    tmp = (TTAnimXTarget - TTAnimX) / 5
    TTAnimX+= tmp
    if abs(tmp) &lt;= 1
      TTAnim = false
    }
  
  if HintTimeUp &amp;&amp; HintTimer==0
    {
    HintObj = instance_create(0,0,oSquareHint)
    HintObj.HINT_WORD = funcGetWord()
    HintObj.HINT_LENGTH = MinLen*4
    with HintObj {event_user(0)}
    HintTimer += 666
    HintTimeUp = false
    }
  else if HintTooLong &amp;&amp; HintTimer==0
    {
    HintObj = instance_create(0,0,oSquareHint)
    HintObj.HINT_WORD = funcGetWord()
    HintObj.HINT_LENGTH = MinLen*4
    with HintObj {event_user(0)}
    HintTimer += 690
    HintTiiLong = false
    }
  else if HintWrong==1 &amp;&amp; HintTimer==0
    {
    HintObj = instance_create(0,0,oSquareHint)
    HintObj.HINT_WORD = funcGetWord()
    HintObj.HINT_LENGTH = MinLen*4
    with HintObj {event_user(0)}
    HintTimer += 720
    HintWrong = 2
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if BStart&gt;0
  {
  if BStart.clicked
    {
    instance_destroy(BStart,true)
    BStart = -1
    prepared = true
    Cube.Rot = true
    currWord = string_char_at(prevWord,string_length(prevWord))
    global.profile[?'PSGAMES'] ++
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gameover Event
with Stat {event_user(0)}
instance_destroy(Cube,true)
instance_destroy(self,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//alpha background
draw_sprite_ext(sPixel,0,0,0,1600,1200,0,0,0.5)
//pre-sets
draw_set_font(fImpact64)
draw_set_valign(fa_top)
draw_set_alpha(1)
//TabuAnim
draw_set_color(64)
draw_line_width(0,10,1600,10,16)
draw_set_color(128)
draw_line_width(0,10,TabuQtyAnimX,10,10)
//DecAnim
draw_set_color(64)
draw_line_width(0,30,1600,30,16)
draw_set_color(128)
draw_line_width(0,30,DecAnimX,30,10)
//ShiftAnim
draw_set_color(64)
draw_line_width(0,50,1600,50,16)
draw_set_color(128)
draw_line_width(0,50,ShiftAnimX,50,10)
//TTAnim
draw_set_color(64)
draw_line_width(0,70,1600,70,16)
draw_set_color(128)
draw_line_width(0,70,TTAnimX,70,10)
//HintTimer
draw_set_color(64)
draw_line_width(0,90,1600,90,16)
draw_set_color(128)
draw_line_width(0,90,HintTimer,90,10)
//timer
draw_set_color(c_white)
draw_set_halign(fa_center)
draw_text(800,1100,formatTimeString(Timer))
//abilities
draw_set_halign(fa_right)
draw_sprite_ext(sSquareFaded,0,1344,Cube.y-MinLen*32-12,1,0.3,0,c_white,0.66)
draw_text(1595,Cube.y-MinLen*32-25,'Score: ' +string(Stat.pp))
draw_text(1595,Cube.y-MinLen*32+45,'Shifts: '+string(ShiftQty))
draw_text(1595,Cube.y-MinLen*32+115,'Unbans: '+string(TTQty))
//hints

//full list
draw_set_halign(fa_left)
j = 0

if prevAnim
  cl = make_color_rgb(255,prevAnimTick*8,prevAnimTick*8)
else
  cl = c_white

draw_sprite_ext(sSquareFaded,0,256,Cube.y-MinLen*32+64,1,0.3,180,cl,0.66)

if prevOffset == -1
  for (i=words-1; i&gt;=0; i--)
    {
    if string_length(prevWordList[| i]) &gt;= MinLen
      draw_text(5,Cube.y-MinLen*32+45+j*70,prevWordList[| i])
    j++
    draw_set_alpha(draw_get_alpha()-0.08)
    }
else
  {
  for (i=prevOffset; i&gt;=0; i--)
    {
    if string_length(prevWordList[| i]) &gt;= MinLen
      draw_text(5,Cube.y-MinLen*32-25+j*70,prevWordList[| i])
    j++
    draw_set_alpha(draw_get_alpha()-0.08)
    }
  draw_set_alpha(0.92)
  j = -1
  for (i=prevOffset+1; i&lt;words; i++)
    {
    if string_length(prevWordList[| i]) &gt;= MinLen
      draw_text(5,Cube.y-MinLen*32-25+j*70,prevWordList[| i])
    j--
    draw_set_alpha(draw_get_alpha()-0.08)
    }
  }
//TabuHilight
if TT
  {
  draw_set_alpha(0.66)
  j = MinLen*32
  draw_rectangle(Cube.x-j+TTNum*72,Cube.y-j-100,Cube.x-j+TTNum*72+66,Cube.y-j-34,false)
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ShiftQty &gt; 0
  if !Shift
    {
    Shift = true
    currWord = string_char_at(prevWord, string_length(prevWord)-1)
    Cube.w1 = currWord
    Cube.NewWord = true
    Cube.Shifted = true
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Shift
    {
    Shift = false
    currWord = string_char_at(prevWord, string_length(prevWord))
    Cube.w1 = currWord
    Cube.NewWord = true
    Cube.Shifted = false
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ok = true
Stat.attempts++

//check len
if string_length(currWord) &lt; MinLen
  {
  ok = false
  Cube.LengthErr = true
  Stat.lens++
  }
  
//check tabu
if ok &amp;&amp; prepared
{
for (i=2; i&lt;=string_length(currWord); i++)
  {
  j = ds_list_find_index(TabuList, string_char_at(currWord,i))
  if (j != -1) &amp;&amp; (j != TTNum)
    {
    ok = false 
    Cube.TabuErr = true
    Cube.TabuErrNum = j
    Stat.tabus++
    break
    } 
  }
}

//check prevword
if ok &amp;&amp; prepared
  if ds_list_find_index(prevWordList,currWord) != -1
    {
    if HintWrong == 0
      {
      HintWrong = 1
      HintTimer+= 228
      }
    ok = false
    prevAnim = true
    Stat.prevs++
    }
    
//check dict
if ok &amp;&amp; prepared
  {
  //first lv find
  tmpm = ds_map_find_value(global.DictDS,string_char_at(currWord,1))
  if tmpm != -1
    {
    tmpl = ds_map_find_value(tmpm,string_char_at(currWord,2))
    if tmpl != -1
      {
      tmp = ds_list_find_index(tmpl,currWord)
      if tmp != -1
        {
        //stats count
        words++
        global.profile[?'PSWORDS'] ++
        global.profile[?'PSLETTERS'] += string_length(currWord)
        Stat.words++
        Stat.letters += string_length(currWord)
        Stat.pp+= words + (Timer div 1800) * MinLen + string_length(currWord)
        //words changing
        prevWord = currWord
        MinLen = string_length(currWord)
        ds_list_add(prevWordList,currWord)
        Cube.Rot = true
        Cube.LengthErrTick = 0
        Cube.LengthErr = false
        Timer+= string_length(currWord)*150 - Timer div 60
        currWord = string_char_at(currWord, string_length(currWord))
        //shift prog
        if Shift
          {
          ShiftQty--
          Shift = false
          }
        ShiftProg+= string_length(prevWord) + ds_list_size(TabuList)
        if ShiftProg &gt;= ShiftReq
          {
          ShiftProg-= ShiftReq
          ShiftReq+= MinLen
          ShiftQty++
          }
        ShiftAnim = true
        ShiftAnimXTarget = ShiftProg / ShiftReq * 1600
        //TT prog
        if TT
          {
          TT = false
          TTNum = 0
          TTQty--
          }
        TTProg+= string_length(prevWord) + ds_list_size(TabuList) + (Timer div 1800)
        if TTProg &gt;= TTReq
          {
          TTProg-= TTReq
          TTReq+= TTReq div 42
          TTQty++
          }
        TTAnim = true
        TTAnimXTarget = TTProg / TTReq * 1600
        //length dec calc
        tmp = string_length(prevWord) + ds_list_size(TabuList) - 9
        if tmp &gt; 0
          {
          DecProg+= tmp
          if DecProg &gt;= DecReq
            {
            DecProg-= DecReq
            DecQty++
            MinLen--
            Cube.MinLenDec = true
            switch DecQty
              {
              case 2: case 3: DecReq = 42; break;
              case 4: case 5: DecReq = 100; break;
              case 6: DecReq = 666; break;
              case 7: DecReq = 9000; break;
              default: DecReq = 999999999
              }
            }
          DecAnim = true
          DecAnimXTarget = DecProg / DecReq * 1600
          }
        //tabu calc
        TabuQtyProg++
        if TabuQtyProg &gt;= TabuQtyMax
          {
          TabuQty++
          TabuQtyProg = 0
          switch TabuQty
            {
            case 2: case 3: TabuQtyMax = 42; break;
            case 4: case 5: TabuQtyMax = 100; break;
            case 6: TabuQtyMax = 666; break;
            case 7: TabuQtyMax = 9000; break;
            default: TabuQtyMax = 999999999
            }
          }
        TabuQtyAnim = true
        TabuQtyAnimXTarget = TabuQtyProg / TabuQtyMax * 1600
        //Tabu refresh
        ds_list_clear(TabuList)
        for (i=1; i&lt;=TabuQty; i++)
          {
          tmp = funcNewTabuLetter(3 + TabuQtyProg / 100)      //3% chance of vowel tabu
          if (tmp != string_char_at(prevWord,string_length(prevWord))) &amp;&amp; (ds_list_find_index(TabuList,tmp) == -1)
            ds_list_add(TabuList,tmp)
          }
        //HintRefresh
        HintTimeUp = false
        HintTooLong = false
        HintWrong = 0
        HintTimer+= 228
        }
      else
        {
        if HintWrong == 0
          {
          HintWrong = 1
          HintTimer+= 228
          }
        Cube.LengthErr = true
        Stat.dicts++
        }
      }
    else
      {
      if HintWrong == 0
        {
        HintWrong = 1
        HintTimer+= 228
        }
      Cube.LengthErr = true
      Stat.dicts++
      }
    }
  else
    {
    if HintWrong == 0
      {
      HintWrong = 1
      HintTimer+= 228
      }
    Cube.LengthErr = true
    Stat.dicts++
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check(vk_enter)
  {     
  if keyboard_check(vk_backspace) 
    {    
    if string_length(currWord) &gt; 1      
      currWord = string_copy(currWord,1,string_length(currWord)-1)
    Cube.TabuErr = false
    Cube.TabuErrNum = -1
    }
  else if keyboard_check(vk_tab) &amp;&amp; TTQty &gt; 0
    {
    if TT
      {
      TTNum++
      if TTNum == ds_list_size(TabuList)
        {
        TTNum = -1
        TT = false
        }
      }
    else
      {
      TT = true
      TTNum = 0
      }
    }
  else if !Cube.Rot
    {
    keyboard_lastchar = string_upper(keyboard_lastchar)
    if (ord(keyboard_lastchar)&gt;64)&amp;&amp;(ord(keyboard_lastchar)&lt;91)
      currWord+= keyboard_lastchar
    keyboard_lastchar = ''                //reset lastchar if next key is ctrl, alt or similar...
    }
  Cube.w1 = currWord  
  Cube.NewWord = true
  
  //find similar in prevs
  prevOffset = -1
  for (i=words-1; i&gt;=0; i--)
    {
    if string_length(prevWordList[| i]) &lt; MinLen
      continue
    if currWord == string_copy(prevWordList[| i], 1,string_length(currWord))
      {
      prevOffset = i
      break
      }
    }
  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
